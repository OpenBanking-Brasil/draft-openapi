openapi: 3.0.0
info:
  title: API Automatic Payments - Open Finance Brasil
  description: |
    API de Iniciação de Pagamentos automáticos, responsável por viabilizar as operações de iniciação de pagamentos automáticos (Pix automático e Sweeping Accounts) para o Open Finance Brasil. 
    Para cada uma das formas de pagamento previstas é necessário obter prévio consentimento do cliente através dos endpoints dedicados ao consentimento nesta API.

    # Orientações
    - `CONTA`, referente às instituições detentoras de conta participantes do Open Finance Brasil;
    - `PAGTO`, referente às instituições iniciadoras de pagamento participantes do Open Finance Brasil. 
    Os tokens utilizados para consumo nos endpoints de consentimentos devem possuir o scope payments e os endpoints de pagamentos recorrentes devem possuir os scopes openid e payments. 
    Esta API não requer a implementação de permissions para sua utilização. 
    Todas as requisições e respostas devem ser assinadas seguindo o protocolo estabelecido na sessão Assinaturas do guia de segurança.

    ## Orientações gerais sobre os consentimentos de pagamentos automáticos
    - Duração e reutilização do consentimento: A utilização das credenciais geradas a partir de uma autorização de um consentimento recorrente deve durar até que o consentimento recorrente atinja o fim do seu ciclo de vida, conforme detalhado na sua máquina de estados (adicionar o link da máquina de estados de pagamentos automáticos quando estiver disponível). 
    - Credenciais: As credenciais (authorization_code) geradas na autorização do consentimento devem ser utilizadas para criação dos pagamentos subsequentes utilizando o mecanismo de refresh, caso necessário. Maiores informações através do link [[PT] Open Finance Brasil Financial-grade API Security Profile 1.0 Implementers Draft 3 - Área do Desenvolvedor -Open Finance Brasil - Área do Desenvolvedor (atlassian.net)](https://openfinancebrasil.atlassian.net/wiki/spaces/OF/pages/82051180/PT+Open+Finance+Brasil+Financial-grade+API+Security+Profile+1.0+Implementers+Draft+3#7.2.2.-Servidor-de-autorização)

    ## Regras do arranjo Pix
    No contexto da API de Pagamentos Automáticos, os payloads de mensagem que trafegam tanto por parte da instituição iniciadora de transação de pagamento quanto por parte da instituição detentora de conta devem estar assinados. 
    Para o processo de assinatura destes payloads, as instituições devem seguir as especificações de segurança publicadas no Portal do desenvolvedor.

    ## Controle de acesso
    - Os endpoints de consulta de pagamentos GET /pix/recurring-payments/{recurringPaymentId} e GET /pix/recurring-payments devem suportar acesso a partir de access_token emitido por meio de um grant_type do tipo client credentials, como opção do uso do token vinculado ao consentimento (hybrid flow).
    - Para evitar vazamento de informação, a detentora deve validar que o pagamento consultado pertence ao ClientId que o criou e, caso haja divergências, retorne um erro HTTP 400.

    ## Aprovações de múltipla alçada

    Todas as aprovações devem ser realizadas até a data/hora limite suportada pela detentora e em tempo hábil para realizar o primeiro pagamento.

    ## Validações
 
    Durante a jornada de iniciação de pagamento, diferentes validações são necessárias pela instituição detentora de conta e devem ocorrer conforme a seguir:

    1. **Validações na criação do consentimento de longa duração (_POST /recurring-consents_)**  
      1.1 **Orientações Iniciais**  
        &ensp;1.1.1 Não devem ser retornadas na resposta deste endpoint informações associadas ao usuário/cliente (ex. insuficiência de saldo, conta inexistente/bloqueada).  
        &ensp;1.1.2 Não devem ser realizadas validações de informações sobre o usuário/cliente durante a criação do consentimento.  
      1.2 **Casos de erro relacionados às permissões de segurança para acesso à API (ex. certificado, access_token, jwt, assinatura)**  
        &ensp;1.2.1 Validação de Certificado: Valida utilização de certificado correto durante processo de DCR - HTTP Code 401 (INVALID_CLIENT);  
        &ensp;1.2.2 Validação de Access_Token: Verifica se Access_Token utilizado está correto - HTTP Code 401 (UNAUTHORIZED);  
        &ensp;1.2.3 Validação de assinatura da mensagem: Valida se assinatura das mensagens enviadas está correta – HTTP Code 400 (BAD_SIGNATURE);  
        &ensp;1.2.4 Validação de Claims (exceto data);  
          &emsp;1.2.4.1 Valida se dados (aud, iss, iat e jti) são válidos - HTTP status code 403 – (INVALID_CLIENT);  
          &emsp;1.2.4.2 Valida reuso de jti - HTTP Code 403 (INVALID_CLIENT).  
      1.3 **Casos de erro sintáticos e semânticos, previstos com retorno HTTP Code 422 - Unprocessable Entity (detalhamento adicional na documentação técnica da API):**   
        &ensp;1.3.1 **Sintáticos**  
          &emsp;1.3.1.1 Envio de campos obrigatórios: Valida se todos os campos obrigatórios foram informados (PARAMETRO_NAO_INFORMADO);  
          &emsp;1.3.1.2 Formatação de parâmetros: Valida se parâmetros informados obedecem a formatação especificada (PARAMETRO_INVALIDO).  
        &ensp;1.3.2 **Semânticos**  
          &emsp;1.3.2.1 Data de pagamento: Valida se a data de pagamento enviada é válida para a forma de pagamento selecionada (DATA_PAGAMENTO_INVALIDA);  
          &emsp;1.3.2.2 Detalhes do pagamento: Valida se determinado parâmetro informado obedece às regras de negócio (DETALHE_PAGAMENTO_INVALIDO);  
          &emsp;1.3.2.3 Demais validações não explicitamente informadas (ex. suspeita de fraude): (NAO_INFORMADO);  
          &emsp;1.3.2.4 Idempotência: Valida se há divergência entre chave de idempotência e informações enviadas (ERRO_IDEMPOTENCIA).  

    2. **Demais validações executadas durante o processamento assíncrono do consentimento pela detentora poderão ser consultados pela iniciadora através do endpoint GET /recurring-consents/{consentId} previstos com retorno HTTP Code 200 – OK com status REJECTED e rejectionReason conforme abaixo:**  
      2.1 **Validações durante o processamento assíncrono do consentimento**  
        &ensp;2.1.1 Falha de infraestrutura: Ocorreu algum erro interno na detentora durante processamento da criação do consentimento (FALHA_INFRAESTRUTURA);  
        &ensp;2.1.2 Tempo de autorização expirado: O usuário não confirmou o consentimento e o mesmo expirou (TEMPO_EXPIRADO_AUTORIZACAO);  
        &ensp;2.1.3 Rejeitado pelo usuário: O usuário explicitamente rejeitou a autorização do consentimento (REJEITADO_USUARIO);  
        &ensp;2.1.4 Mesma conta origem/destino: A conta indicada pelo usuário para recebimento é a mesma selecionada para o pagamento (CONTAS_ORIGEM_DESTINO_IGUAIS);  
        &ensp;2.1.5 Tipo de conta inválida: A conta indicada não permite operações de pagamento (CONTA_NAO_PERMITE_PAGAMENTO);  
        &ensp;2.1.6 Saldo do usuário: Valida se a conta selecionada possui saldo suficiente para realizar o pagamento (SALDO_INSUFICIENTE);  
        &ensp;2.1.7 Limites da transação: Valida se o valor ultrapassa o limite estabelecido [na instituição/no arranjo/outro] para permitir a realização de transações pelo cliente (VALOR_ACIMA_LIMITE);  

    3. **Validações na criação do pagamento - Síncrono (_POST /pix/recurring-payments_)**  
      3.1 **Casos de erro relacionados às permissões de segurança para acesso à API (ex. certificado, access_token, jwt, assinatura)**  
        &ensp;3.1.1 Validação de Certificado: Valida utilização de certificado correto durante processo de DCR - HTTP Code 401 (INVALID_CLIENT);  
        &ensp;3.1.2 Validação de Access_Token: Verifica se Access_Token utilizado está correto - HTTP Code 401 (UNAUTHORIZED);  
        &ensp;3.1.3 Validação de assinatura da mensagem: Valida se assinatura das mensagens enviadas está correta – HTTP Code 400 (BAD_SIGNATURE);  
        &ensp;3.1.4 Validação de Claims (exceto data);  
          &emsp;3.1.4.1 Valida se dados (aud, iss, iat e jti) são válidos - HTTP status code 403 – (INVALID_CLIENT);  
          &emsp;3.1.4.2 Valida reuso de jti - HTTP Code 403 (INVALID_CLIENT).  
      3.2 **Casos de erro sintáticos e semânticos, previstos com retorno HTTP Code 422 - Unprocessable Entity (detalhamento adicional na documentação técnica da API):**  
        &ensp;3.2.1 Sintáticos  
          &emsp;3.2.1.1 Envio de campos obrigatórios: Valida se todos os campos obrigatórios são informados (PARAMETRO_NAO_INFORMADO);  
          &emsp;3.2.1.2 Formatação de parâmetros: Valida se parâmetros informados obedecem a formatação especificada (PARAMETRO_INVALIDO).  
        &ensp;3.2.2 Semânticos  
          &emsp;3.2.2.1 Saldo do usuário: Valida se a conta selecionada possui saldo suficiente para realizar o pagamento (SALDO_INSUFICIENTE);  
          &emsp;3.2.2.2 Limites da transação: Valida se valor (ou quantidade de transações) ultrapassa faixa de limite parametrizada na detentora na conta do cliente pagador (VALOR_ACIMA_LIMITE);  
          &emsp;3.2.2.3 Valor informado: Valida se valor enviado é válido para o consentimento associado ao pagamento (VALOR_INVALIDO);  
          &emsp;3.2.2.4 Status Consentimento: Valida se status de consentimento é diferente de “AUTHORISED” (CONSENTIMENTO_INVALIDO);  
          &emsp;3.2.2.5 Demais validações não explicitamente informadas (ex. suspeita de fraude): (NAO_INFORMADO);  
          &emsp;3.2.2.6 Divergência entre pagamento e consentimento: Valida se dados do pagamento são diferentes dos dados do consentimento (PAGAMENTO_DIVERGENTE_CONSENTIMENTO)  
          &emsp;3.2.2.7 Recusado pela detentora: Valida se pagamento foi recusado pela detentora (PAGAMENTO_RECUSADO_DETENTORA), com a descrição do motivo de recusa;  
          &emsp;3.2.2.8 Detalhes do pagamento: Valida se determinado parâmetro informado obedece as regras de negócio (DETALHE_PAGAMENTO_INVALIDO);  
          &emsp;3.2.2.9 Pagamento recusado no Sistema de Pagamentos Instantâneos (SPI) (PAGAMENTO_RECUSADO_SPI);  
          &emsp;3.2.2.10 Idempotência: Valida se há divergência entre chave de idempotência e informações enviadas (ERRO_IDEMPOTENCIA);  
          &emsp;3.2.2.11 Limite valor excedido por período: Foi atingido o valor limite permitido pelo usuário por um determinado período de tempo no consentimento do pagamento (LIMITE_PERIODO_VALOR_EXCEDIDO);  
          &emsp;3.2.2.12 Limite quantidade excedida por período: A quantidade de cobranças atingiu o limite determinado pelo usuário na criação do consentimento (LIMITE_PERIODO_QUANTIDADE_EXCEDIDO).  

    4. **Validações na consulta do pagamento (_GET /pix/recurring-payments/{recurringPaymentId}_ e _GET /pix/recurring-payments_)**  
      4.1 **Casos de erro relacionados às permissões de segurança para acesso à API (ex. certificado, access_token)**  
        &ensp;4.1.1 Validação de Certificado: Valida utilização de certificado correto durante processo de DCR - HTTP Code 401 (INVALID_CLIENT);  
        &ensp;4.1.2 Validações de Access_Token: Verifica se Access_Token utilizado está correto - HTTP Code 401 (UNAUTHORIZED).

    5. **Demais validações executadas durante o processamento assíncrono do pagamento pela detentora, poderão ser consultados pela iniciadora através dos endpoints _GET /pix/recurring-payments/{recurringPaymentId}_ e _GET /pix/recurring-payments_ previstos com retorno HTTP Code 200 - OK com status RJCT (Rejected) e rejectionReason conforme abaixo (detalhamento adicional na documentação técnica da API):**  
      5.1 **Demais validações durante o processamento assíncrono:**  
        &ensp;5.1.1 - Saldo do usuário: Valida se a conta selecionada possui saldo suficiente para realizar o pagamento (SALDO_INSUFICIENTE);  
        &ensp;5.1.2 - Limites da transação: Valida se valor (ou quantidade de transações) ultrapassa faixa de limite parametrizada na detentora (VALOR_ACIMA_LIMITE);  
        &ensp;5.1.3 - Valor informado: Valida se valor enviado é válido para o consentimento do pagamento (VALOR_INVALIDO);  
        &ensp;5.1.4 - Demais validações não explicitamente informadas (ex. suspeita de fraude): (NAO_INFORMADO);  
        &ensp;5.1.5 - Divergência entre pagamento e consentimento: Valida se dados do pagamento são diferentes dos dados do consentimento (PAGAMENTO_DIVERGENTE_CONSENTIMENTO);  
        &ensp;5.1.6 - Recusado pela detentora: Valida se pagamento foi recusado pela detentora (PAGAMENTO_RECUSADO_DETENTORA), com a descrição do motivo de recusa;  
        &ensp;5.1.7 - Pagamento recusado no Sistema de Pagamentos Instantâneos (SPI) (PAGAMENTO_RECUSADO_SPI);  
        &ensp;5.1.8 - Erro de infraestrutura na consulta ao SPI: Ocorreu uma falha de infraestrutura durante a consulta ao SPI(FALHA_INFRAESTRUTURA_SPI);  
        &ensp;5.1.9 - Erro de infraestrutura na consulta ao ICP: Ocorreu uma falha de infraestrutura durante a consulta ao ICP (FALHA_INFRAESTRUTURA_ICP);  
        &ensp;5.1.10 - Erro de infraestrutura na comunicação com o PSP do recebedor: Ocorreu uma falha de infraestrutura durante a comunicação com o PSP do recebedor (FALHA_INFRAESTRUTURA_PSP_RECEBEDOR);  
        &ensp;5.1.11 - Erro de infraestrutura interno na detentora: Ocorreu uma falha de infraestrutura interna na detentora durante o processamento do pagamento (FALHA_INFRAESTRUTURA_DETENTORA);  
        &ensp;5.1.12 - Status Consentimento: Valida se status de consentimento é diferente de “AUTHORISED” (CONSENTIMENTO_INVALIDO);  
  version: 1.0.0-beta.1
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
  contact:
    name: Governança do Open Finance Brasil – Especificações
    email: gt-interfaces@openbankingbr.org
    url: 'https://openbanking-brasil.github.io/areadesenvolvedor/'
servers:
  - url: 'https://api.banco.com.br/open-banking/blablabla/v1'
    description: Servidor de Produção
  - url: 'https://apih.banco.com.br/open-banking/blablabla/v1'
    description: Servidor de Homologação
tags:
  - name: Recurring Consents
  - name: Recurring Payments
paths:
  /recurring-consents:
    post:
      tags:
        - Recurring Consents
      summary: Criação do Consentimento Recorrente.
      operationId: paymentsPostRecurringConsents
      description: Criação do Consentimento Recorrente.
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xCustomerUserAgent'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/XIdempotencyKey'
      requestBody:
        content:
          application/jwt:
            schema:
              $ref: '#/components/schemas/CreateRecurringConsent'
        description: Payload para criação do consentimento para iniciação do pagamento.
        required: true
      responses:
        '201':
          $ref: '#/components/responses/RecurringConsentsConsentIdRead'
        '400':
          $ref: '#/components/responses/BadRequestPayments'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '422':
          $ref: '#/components/responses/UnprocessableEntityConsents'
        '423':
          $ref: '#/components/responses/LockedWithAdditionalProperties'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutWithAdditionalProperties'
        '529':
          $ref: '#/components/responses/SiteIsOverloaded'
        default:
          description: Erro inesperado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
      security:
        - OAuth2ClientCredentials:
            - recurringPayments
  '/recurring-consents/{recurringConsentId}':
    get:
      tags:
        - Recurring Consents
      summary: Listagem do Consentimento Recorrente por Id do Consentimento.
      operationId: paymentsGetRecurringConsentsConsentId
      description: Listagem do Consentimento Recorrente por Id do Consentimento.
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xCustomerUserAgent'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/recurringConsentId'
      responses:
        '200':
          $ref: '#/components/responses/RecurringConsentsConsentIdRead'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '422':
          $ref: '#/components/responses/UnprocessableEntityConsents'
        '423':
          $ref: '#/components/responses/LockedWithAdditionalProperties'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutWithAdditionalProperties'
        '529':
          $ref: '#/components/responses/SiteIsOverloaded'
        default:
          description: Erro inesperado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
      security:
        - OAuth2ClientCredentials:
            - recurringPayments
    patch:
      tags:
        - Recurring Consents
      summary: Atualização do Consentimento.
      operationId: paymentsPatchRecurringConsentsConsentId
      description: Atualização do Consentimento.
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xCustomerUserAgent'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/recurringConsentId'
        - $ref: '#/components/parameters/XIdempotencyKey'
      requestBody:
        content:
          application/jwt:
            schema:
              $ref: '#/components/schemas/PatchRecurringConsent'
        description: Payload para criação do consentimento para iniciação do pagamento.
        required: true
      responses:
        '200':
          $ref: '#/components/responses/RecurringConsentsConsentIdRead'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '422':
          $ref: '#/components/responses/UnprocessableEntityConsents'
        '423':
          $ref: '#/components/responses/LockedWithAdditionalProperties'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutWithAdditionalProperties'
        '529':
          $ref: '#/components/responses/SiteIsOverloaded'
        default:
          description: Erro inesperado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
      security:
        - OAuth2ClientCredentials:
            - recurringPayments
  /pix/recurring-payments:
    post:
      tags:
        - Recurring Payments
      summary: Criação do Pagamento Recorrente.
      operationId: paymentsPostPixRecurringPayments
      description: Criação do Pagamento Recorrente.
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xCustomerUserAgent'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/XIdempotencyKey'
      requestBody:
        content:
          application/jwt:
            schema:
              $ref: '#/components/schemas/CreateRecurringPixPayment'
        description: Payload para criação da iniciação do pagamento Pix.
        required: true
      responses:
        '201':
          $ref: '#/components/responses/201RecurringInitiationPixPaymentCreated'
        '400':
          $ref: '#/components/responses/BadRequestPixPayments'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '422':
          $ref: '#/components/responses/UnprocessableEntityPixPayment'
        '423':
          $ref: '#/components/responses/LockedWithAdditionalProperties'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutWithAdditionalProperties'
        '529':
          $ref: '#/components/responses/SiteIsOverloaded'
        default:
          description: Erro inesperado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
      security:
        - OAuth2AuthorizationCode:
            - openid
            - 'recurringConsent:recurringConsentId'
            - recurringPayments
    get:
      tags:
        - Recurring Payments
      summary: Listagem de Pagamentos Recorrentes.
      operationId: paymentsGetPixRecurringPayments
      description: Listagem de Pagamentos Recorrentes.
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xCustomerUserAgent'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/startDate'
        - $ref: '#/components/parameters/endDate'
      responses:
        '200':
          $ref: '#/components/responses/200RecurringPixPaymentRead'
        '400':
          $ref: '#/components/responses/BadRequestPixPayments'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '422':
          $ref: '#/components/responses/UnprocessableEntityPixPayment'
        '423':
          $ref: '#/components/responses/LockedWithAdditionalProperties'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutWithAdditionalProperties'
        '529':
          $ref: '#/components/responses/SiteIsOverloaded'
        default:
          description: Erro inesperado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
      security:
        - OAuth2AuthorizationCode:
            - recurringPayments
  '/pix/recurring-payments/{recurringPaymentId}':
    get:
      tags:
        - Recurring Payments
      summary: Listagem do Pagamento Recorrente por Id do Pagamento Recorrente.
      operationId: paymentsGetPixRecurringPaymentsPaymentId
      description: Listagem do Pagamento Recorrente por Id do Pagamento Recorrente.
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xCustomerUserAgent'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/recurringPaymentId'
      responses:
        '200':
          $ref: '#/components/responses/200RecurringPaymentsIdRead'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '422':
          $ref: '#/components/responses/UnprocessableEntityPixPayment'
        '423':
          $ref: '#/components/responses/LockedWithAdditionalProperties'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutWithAdditionalProperties'
        '529':
          $ref: '#/components/responses/SiteIsOverloaded'
        default:
          description: Erro inesperado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
      security:
        - OAuth2ClientCredentials:
            - recurringPayments
    patch:
      tags:
        - Recurring Payments
      summary: Atualização do Pagamento Recorrente.
      operationId: paymentsPatchPixRecurringPaymentsPaymentId
      description: Atualização do Pagamento Recorrente.
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/xCustomerUserAgent'
        - $ref: '#/components/parameters/xFapiAuthDate'
        - $ref: '#/components/parameters/xFapiCustomerIpAddress'
        - $ref: '#/components/parameters/xFapiInteractionId'
        - $ref: '#/components/parameters/recurringPaymentId'
        - $ref: '#/components/parameters/XIdempotencyKey'
      requestBody:
        content:
          application/jwt:
            schema:
              $ref: '#/components/schemas/PatchPixPayment'
        description: Atualização do Pagamento Recorrente.
        required: true
      responses:
        '200':
          $ref: '#/components/responses/200RecurringPaymentsIdRead'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '422':
          $ref: '#/components/responses/UnprocessableEntityPixPayments'
        '423':
          $ref: '#/components/responses/LockedWithAdditionalProperties'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutWithAdditionalProperties'        
        '529':
          $ref: '#/components/responses/SiteIsOverloaded'
        default:
          description: Erro inesperado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
      security:
        - OAuth2ClientCredentials:
            - recurringPayments
components:
  schemas:
    422ResponseErrorCreateConsent:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          minItems: 1
          maxItems: 3
          items:
            type: object
            required:
              - code
              - title
              - detail
            properties:
              code:
                type: string
                enum:
                  - FORMA_PAGAMENTO_INVALIDA
                  - DATA_PAGAMENTO_INVALIDA
                  - DETALHE_PAGAMENTO_INVALIDO
                  - PARAMETRO_NAO_INFORMADO
                  - PARAMETRO_INVALIDO
                  - ERRO_IDEMPOTENCIA
                  - NAO_INFORMADO
                example: FORMA_PAGAMENTO_INVALIDA
                description: |
                  Códigos de erros previstos na criação de consentimento para a iniciação de pagamentos:  
                  • FORMA_PAGAMENTO_INVALIDA: Forma de pagamento inválida.  
                  • DATA_PAGAMENTO_INVALIDA: Data de pagamento inválida.  
                  • DETALHE_PAGAMENTO_INVALIDO: Detalhe do pagamento inválido.  
                  • PARAMETRO_NAO_INFORMADO: Parâmetro não informado.  
                  • PARAMETRO_INVALIDO: Parâmetro inválido.  
                  • ERRO_IDEMPOTENCIA: Erro idempotência.  
                  • NAO_INFORMADO: Não informado.   
              title:
                type: string
                maxLength: 255
                pattern: '[\w\W\s]*'
                example: Forma de pagamento inválida.
                description: |
                  Título específico do erro reportado, de acordo com o código enviado:  
                  • FORMA_PAGAMENTO_INVALIDA: Forma de pagamento inválida.  
                  • DATA_PAGAMENTO_INVALIDA: Data de pagamento inválida.  
                  • DETALHE_PAGAMENTO_INVALIDO: Detalhe do pagamento inválido.  
                  • PARAMETRO_NAO_INFORMADO: Parâmetro não informado.  
                  • PARAMETRO_INVALIDO: Parâmetro inválido.  
                  • ERRO_IDEMPOTENCIA: Erro idempotência.  
                  • NAO_INFORMADO: Não informado.    
              detail:
                type: string
                maxLength: 2048
                pattern: '[\w\W\s]*'
                example: 'Forma de pagamento [Modalidade] não suportada.'
                description: |
                  Descrição específica do erro de acordo com o código reportado:  
                  • FORMA_PAGAMENTO_INVALIDA: Forma de pagamento [Modalidade] não suportada.  
                  • DATA_PAGAMENTO_INVALIDA: Data de pagamento inválida para a forma de pagamento selecionada.  
                  • DETALHE_PAGAMENTO_INVALIDO: Parâmetro [nome_campo] não obedece às regras de negócio.  
                  • PARAMETRO_NAO_INFORMADO: Parâmetro [nome_campo] obrigatório não informado.  
                  • PARAMETRO_INVALIDO: Parâmetro [nome_campo] não obedece as regras de formatação esperadas.  
                  • ERRO_IDEMPOTENCIA: Conteúdo da mensagem (claim data) diverge do conteúdo associado a esta chave de idempotência (x-idempotency-key).  
                  • NAO_INFORMADO: Não reportado/identificado pela instituição detentora de conta.  
        meta:
          $ref: '#/components/schemas/Meta'
    422ResponseErrorCreatePixPayments:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          minItems: 1
          maxItems: 9
          items:
            type: object
            required:
              - code
              - title
              - detail
            properties:
              code:
                $ref: '#/components/schemas/EnumErrorsCreatePayment'
              title:
                type: string
                maxLength: 255
                pattern: '[\w\W\s]*'
                example: Saldo insuficiente.
                description: |
                  Título específico do erro reportado, de acordo com o código enviado:

                  • SALDO_INSUFICIENTE: Saldo insuficiente.

                  • VALOR_ACIMA_LIMITE: Acima do limite estabelecido.

                  • VALOR_INVALIDO: Valor inválido.

                  • COBRANCA_INVALIDA: Cobrança inválida.

                  • CONSENTIMENTO_INVALIDO: Consentimento inválido.

                  • PARAMETRO_NAO_INFORMADO: Parâmetro obrigatório não informado.

                  • PARAMETRO_INVALIDO: Parâmetro com valor inválido.

                  • NAO_INFORMADO: Não informado.

                  • PAGAMENTO_DIVERGENTE_CONSENTIMENTO: Divergência entre pagamento e consentimento.

                  • DETALHE_PAGAMENTO_INVALIDO: Detalhe do pagamento inválido.

                  • PAGAMENTO_RECUSADO_DETENTORA: Pagamento recusado pela detentora de conta.

                  • PAGAMENTO_RECUSADO_SPI: Pagamento recusado no Sistema de Pagamentos Instantâneos (SPI).

                  • ERRO_IDEMPOTENCIA: Erro idempotência.
              detail:
                type: string
                maxLength: 2048
                pattern: '[\w\W\s]*'
                example: A conta selecionada não possui saldo suficiente para realizar o pagamento.
                description: |
                  Descrição específica do erro de acordo com o código reportado:

                  • SALDO_INSUFICIENTE: A conta selecionada não possui saldo suficiente para realizar o pagamento.

                  • VALOR_ACIMA_LIMITE: O valor (ou quantidade de transações) ultrapassa a faixa de limite parametrizada na detentora para permitir a realização de transações pelo cliente.

                  • VALOR_INVALIDO: O valor enviado não é válido para o QR Code informado.

                  • COBRANCA_INVALIDA: Validação de expiração, validação de vencimento ou Status Válido.

                  • CONSENTIMENTO_INVALIDO: Consentimento inválido (status diferente de "AUTHORISED" ou está expirado).

                  • PARAMETRO_NAO_INFORMADO: endToEndId

                  • PARAMETRO_INVALIDO: endToEndId

                  • NAO_INFORMADO: Não reportado/identificado pela instituição detentora de conta.

                  • PAGAMENTO_DIVERGENTE_CONSENTIMENTO: Dados do pagamento divergentes dos dados do consentimento.

                  • DETALHE_PAGAMENTO_INVALIDO: Parâmetro [nome_campo] não obedece às regras de negócio.

                  • PAGAMENTO_RECUSADO_DETENTORA: [descrição do motivo de recusa].

                  • PAGAMENTO_RECUSADO_SPI: [código de erro conforme tabela de domínios reason PACS.002].

                  • ERRO_IDEMPOTENCIA: Conteúdo da mensagem (claim data) diverge do conteúdo associado a esta chave de idempotência (x-idempotency-key).
        meta:
          $ref: '#/components/schemas/Meta'
    422ResponseErrorCreatePixPayment:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          minItems: 1
          maxItems: 9
          items:
            type: object
            required:
              - code
              - title
              - detail
            properties:
              code:
                $ref: '#/components/schemas/EnumErrorsCreatePixPayment'
              title:
                type: string
                maxLength: 255
                pattern: '[\w\W\s]*'
                example: Pagamento não permite cancelamento.
                description: |
                  Título específico do erro reportado, de acordo com o código enviado:

                  • PAGAMENTO_NAO_PERMITE_CANCELAMENTO: Pagamento não permite cancelamento
              detail:
                type: string
                maxLength: 2048
                pattern: '[\w\W\s]*'
                example: Pagamento não permite cancelamento.
                description: |
                  Descrição específica do erro de acordo com o código reportado:

                  • PAGAMENTO_NAO_PERMITE_CANCELAMENTO: Pagamento não permite cancelamento
        meta:
          $ref: '#/components/schemas/Meta'
    BusinessEntity:
      type: object
      description: 'Usuário (pessoa jurídica) que encontra-se logado na instituição Iniciadora de Pagamento. [Restrição] Preenchimento obrigatório se usuário logado na instituição Iniciadora de Pagamento for um CNPJ (pessoa jurídica).'
      required:
        - document
      properties:
        document:
          type: object
          required:
            - identification
            - rel
          properties:
            identification:
              type: string
              maxLength: 14
              description: Número do documento de identificação oficial do titular pessoa jurídica.
              example: '11111111111111'
              pattern: '^\d{14}$'
            rel:
              type: string
              maxLength: 4
              description: Tipo do documento de identificação oficial do titular pessoa jurídica.
              example: CNPJ
              pattern: '^[A-Z]{4}$'
    CreateRecurringConsent:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          description: Objeto contendo as informações de consentimento para a iniciação de pagamento individual.
          required:
            - loggedUser
            - bussinessEntity
            - creditors
            - startDateTime
            - expirationDateTime
            - debtorAccount
            - recurringConfiguration
          properties:
            loggedUser:
              $ref: '#/components/schemas/LoggedUser'
            businessEntity:
              $ref: '#/components/schemas/BusinessEntity'
            creditors:
              $ref: '#/components/schemas/Creditors'
            startDateTime:
              description: Data e hora em que o consentimento deve passar a ser válido. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
              type: string
              format: date-time
              example: '2021-05-21T08:30:00Z'
              pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
              maxLength: 20
            expirationDateTime:
              description: Data e hora em que o consentimento deve deixar de ser válido. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
              type: string
              format: date-time
              example: '2021-05-21T08:30:00Z'
              pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
              maxLength: 20
            additionalInformation:
              description: Deve ser preenchido sempre que o usuário pagador inserir alguma informação adicional no consentimento
              type: string
              example: 'Minha recorrência'
              pattern: '[\w\W\s]*'
              maxLength: 140
            debtorAccount:
              $ref: '#/components/schemas/DebtorAccount'
            recurringConfiguration:
              type: object
              description: Campo destinado a configuração dos diferentes produtos de pagamentos recorrentes.
              properties:
                recurringConfiguration:
                  oneOf:
                    - $ref: '#/components/schemas/Automatic'
                    - $ref: '#/components/schemas/PostSweeping'
                    - $ref: '#/components/schemas/Vrp'
    CreateRecurringPixPayment:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/CreateRecurringPixPaymentData'
    CreateRecurringPixPaymentData:
      type: object
      description: Objeto contendo dados do pagamento e do recebedor (creditor).
      required:
        - recurringConsentId
        - endToEndId
        - date
        - payment
        - creditorAccount
        - cnpjInitiator
        - ibgeTownCode
      properties:
        recurringConsentId:
          type: string
          pattern: '^urn:[a-zA-Z0-9][a-zA-Z0-9\-]{0,31}:[a-zA-Z0-9()+,\-.:=@;$_!*''%\/?#]+$'
          maxLength: 256
          description: |
            Identificador único do consentimento criado para a iniciação de pagamento solicitada. Deverá ser um URN - Uniform Resource Name.
            Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource
            Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN
            seja um identificador de recurso persistente e independente da localização.
            Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
            - o namespace(urn)
            - o identificador associado ao namespace da instituição transnmissora (bancoex)
            - o identificador específico dentro do namespace (C1DD33123).
            Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
        endToEndId:
          $ref: '#/components/schemas/EndToEndIdWithoutRestriction'
        date:
          type: string
          format: date
          maxLength: 10
          pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])$'
          example: '2021-01-01'
          description: |  
            Define a data alvo da liquidação do pagamento.
            O fuso horário de Brasília deve ser utilizado para criação e racionalização sobre os dados deste campo.
        payment:
          $ref: '#/components/schemas/PaymentPix'
        creditorAccount:
          $ref: '#/components/schemas/CreditorAccount'
        remittanceInformation:
          type: string
          maxLength: 140
          pattern: '[\w\W\s]*'
          example: Pagamento da nota XPTO035-002.
          description: |
            Deve ser preenchido sempre que o usuário pagador inserir alguma informação adicional em um pagamento, a ser enviada ao recebedor.
        cnpjInitiator:
          type: string
          pattern: '^\d{14}$'
          maxLength: 14
          example: '50685362000135'
          description: CNPJ do Iniciador de Pagamento devidamente habilitado para a prestação de Serviço de Iniciação no Pix.
        ibgeTownCode:
          type: string
          minLength: 7
          maxLength: 7
          pattern: '^\d{7}$'
          example: '5300108'
          description: |
            O campo ibgetowncode no arranjo PIX, tem o mesmo comportamento que o campo codMun descrito no item 1.6.6 do manual do PIX, conforme segue:

            1. Caso a informação referente ao município não seja enviada; o PSP do recebedor assumirá que não existem feriados estaduais e municipais no período em questão;
        authorisationFlow:
          type: string
          enum:
            - HYBRID_FLOW
            - CIBA_FLOW
            - FIDO_FLOW
          example: HYBRID_FLOW
          description: |
            Campo condicional utilizado para identificar o fluxo de autorização em que o pagamento foi solicitado.
            
            [Restrição] Se CIBA ou FIDO, preenchimento obrigatório. Caso o campo não esteja presente no payload, subentende-se que o fluxo de autorização utilizado é o HYBRID_FLOW.
        consentId:
              type: string
              maxLength: 256
              pattern: '^urn:[a-zA-Z0-9][a-zA-Z0-9\-]{0,31}:[a-zA-Z0-9()+,\-.:=@;$_!*''%\/?#]+$'
              example: 'urn:bancoex:C1DD33123'
              description: |
                Identificador único do consentimento criado para a iniciação de pagamento solicitada. Deverá ser um URN - Uniform Resource Name.
                Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource
                Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN
                seja um identificador de recurso persistente e independente da localização.
                Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
                - o namespace(urn)
                - o identificador associado ao namespace da instituição transnmissora (bancoex)
                - o identificador específico dentro do namespace (C1DD33123).
                Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).  

                [Restrição] Este campo é de preenchimento obrigatório quando o valor do campo authorisationFlow for igual a FIDO_FLOW.
    PostCreditorAccount:
      type: object
      description: |
        Recebe os dados de conta do usuário recebedor. 
      required:
        - ispb
        - number
        - accountType
      properties:
        ispb:
          type: string
          minLength: 8
          maxLength: 8
          pattern: '^[0-9]{8}$'
          example: '12345678'
          description: |
            Deve ser preenchido com o ISPB (Identificador do Sistema de Pagamentos Brasileiros) do participante do SPI (Sistema de pagamentos instantâneos) somente com números.
        issuer:
          type: string
          minLength: 1
          maxLength: 4
          pattern: '^[0-9]{1,4}$'
          example: '1774'
          description: |
            Código da Agência emissora da conta sem dígito. 
            (Agência é a dependência destinada ao atendimento aos clientes, ao público em geral e aos associados de cooperativas de crédito, 
            no exercício de atividades da instituição, não podendo ser móvel ou transitória).
            
            [Restrição] Preenchimento obrigatório para os seguintes tipos de conta: CACC (CONTA_DEPOSITO_A_VISTA) e SVGS (CONTA_POUPANCA).
        number:
          type: string
          minLength: 1
          maxLength: 20
          pattern: '^[0-9]{1,20}$'
          example: '1234567890'
          description: |
            Deve ser preenchido com o número da conta do usuário recebedor, com dígito verificador (se este existir),  
            se houver valor alfanumérico, este deve ser convertido para 0.
        accountType:
          $ref: '#/components/schemas/EnumAccountPaymentsType'
    CreditorAccount:
      type: object
      description: |
        Recebe os dados de conta do usuário recebedor. 
      required:
        - ispb
        - issuer
        - number
        - accountType
      properties:
        ispb:
          type: string
          minLength: 8
          maxLength: 8
          pattern: '^[0-9]{8}$'
          example: '12345678'
          description: |
            Deve ser preenchido com o ISPB (Identificador do Sistema de Pagamentos Brasileiros) do participante do SPI (Sistema de pagamentos instantâneos) somente com números.
        issuer:
          type: string
          minLength: 1
          maxLength: 4
          pattern: '^[0-9]{1,4}$'
          example: '1774'
          description: |
            Código da Agência emissora da conta sem dígito. 
            (Agência é a dependência destinada ao atendimento aos clientes, ao público em geral e aos associados de cooperativas de crédito, 
            no exercício de atividades da instituição, não podendo ser móvel ou transitória).
            
            [Restrição] Preenchimento obrigatório para os seguintes tipos de conta: CACC (CONTA_DEPOSITO_A_VISTA) e SVGS (CONTA_POUPANCA).
        number:
          type: string
          minLength: 1
          maxLength: 20
          pattern: '^[0-9]{1,20}$'
          example: '1234567890'
          description: |
            Deve ser preenchido com o número da conta do usuário recebedor, com dígito verificador (se este existir),  
            se houver valor alfanumérico, este deve ser convertido para 0.
        accountType:
          $ref: '#/components/schemas/EnumAccountPaymentsType'
    DebtorAccount:
      type: object
      description: |
        Objeto que contém a identificação da conta de origem do pagador.  
        As informações quanto à conta de origem do pagador poderão ser trazidas no consentimento para a detentora, caso a iniciadora tenha coletado essas informações do cliente. Do contrário, será coletada na detentora e trazida para a iniciadora como resposta à criação do pagamento.
      required:
        - ispb
        - number
        - accountType
      properties:
        ispb:
          type: string
          minLength: 8
          maxLength: 8
          pattern: '^[0-9]{8}$'
          example: '12345678'
          description: |
            Deve ser preenchido com o ISPB (Identificador do Sistema de Pagamentos Brasileiros) do participante do SPI (Sistema de pagamentos instantâneos) somente com números.
        issuer:
          type: string
          minLength: 1
          maxLength: 4
          pattern: '^[0-9]{1,4}$'
          example: '1774'
          description: |
            Código da Agência emissora da conta sem dígito. 
            (Agência é a dependência destinada ao atendimento aos clientes, ao público em geral e aos associados de cooperativas de crédito, 
            no exercício de atividades da instituição, não podendo ser móvel ou transitória).
            
            [Restrição] Preenchimento obrigatório para os seguintes tipos de conta: CACC (CONTA_DEPOSITO_A_VISTA) e SVGS (CONTA_POUPANCA).
        number:
          type: string
          minLength: 1
          maxLength: 20
          pattern: '^[0-9]{1,20}$'
          example: '1234567890'
          description: |
            Deve ser preenchido com o número da conta transacional do usuário pagador, com dígito verificador (se este existir),  
            se houver valor alfanumérico, este deve ser convertido para 0.
        accountType:
          $ref: '#/components/schemas/EnumAccountPaymentsType'
    ConsentsDebtorAccount:
      type: object
      description: |
        Objeto que contém a identificação da conta de origem do pagador. As informações quanto à conta de origem do pagador poderão ser trazidas no consentimento para a detentora, caso a iniciadora tenha coletado essas informações do cliente. 
        Do contrário, será coletada na detentora e trazida para a iniciadora como resposta à criação do pagamento.  
      required:
        - ispb
        - issuer
        - number
        - accountType
        - ibgeTownCode
      properties:
        ispb:
          type: string
          minLength: 8
          maxLength: 8
          pattern: '^[0-9]{8}$'
          example: '12345678'
          description: |
            Deve ser preenchido com o ISPB (Identificador do Sistema de Pagamentos Brasileiros) do participante do SPI (Sistema de pagamentos instantâneos) somente com números.
        issuer:
          type: string
          minLength: 1
          maxLength: 4
          pattern: '^[0-9]{1,4}$'
          example: '1774'
          description: |
            Código da Agência emissora da conta sem dígito. 
            (Agência é a dependência destinada ao atendimento aos clientes, ao público em geral e aos associados de cooperativas de crédito, 
            no exercício de atividades da instituição, não podendo ser móvel ou transitória).
            
            [Restrição] Preenchimento obrigatório para os seguintes tipos de conta: CACC (CONTA_DEPOSITO_A_VISTA) e SVGS (CONTA_POUPANCA).
        number:
          type: string
          minLength: 1
          maxLength: 20
          pattern: '^[0-9]{1,20}$'
          example: '1234567890'
          description: |
            Deve ser preenchido com o número da conta transacional do usuário pagador, com dígito verificador (se este existir),  
            se houver valor alfanumérico, este deve ser convertido para 0.
        accountType:
          $ref: '#/components/schemas/EnumAccountPaymentsType'
        ibgeTownCode:
          type: string
          minLength: 7
          maxLength: 7
          pattern: '^\d{7}$'
          example: '5300108'
          description: |
            O campo ibgetowncode no arranjo PIX, tem o mesmo comportamento que o campo codMun descrito no item 1.6.6 do manual do PIX, conforme segue:
            1. Caso a informação referente ao município não seja enviada; o PSP do recebedor assumirá que não existem feriados estaduais e municipais no período em questão;
        overdraftLimit:
          type: boolean
          example: true
          description: Indica se o usuário pagador autorizou a utilização de limite na sua conta para realização de pagamentos
    EndToEndId:
      type: string
      minLength: 32
      maxLength: 32
      pattern: '^([E])([0-9]{8})([0-9]{4})(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])(2[0-3]|[01][0-9])([0-5][0-9])([a-zA-Z0-9]{11})$'
      example: E9040088820210128000800123873170
      description: |
        Trata-se de um identificador único, gerado na instituição iniciadora de pagamento e recebido na instituição detentora de conta, permeando toda a jornada do pagamento Pix.

        [Restrição] A detentora deve obrigatoriamente retornar o campo Com o mesmo valor recebido da iniciadora.
    EndToEndIdWithoutRestriction:
      type: string
      minLength: 32
      maxLength: 32
      pattern: '^([E])([0-9]{8})([0-9]{4})(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])(2[0-3]|[01][0-9])([0-5][0-9])([a-zA-Z0-9]{11})$'
      example: E9040088820210128000800123873170
      description: |
        Deve ser preenchido no formato padrão ExxxxxxxxyyyyMMddHHmmkkkkkkkkkkk (32 caracteres; “case sensitive”, isso é, diferencia letras maiúsculas e minúsculas), sendo:

        • “E” – fixo (1 caractere);  

        • xxxxxxxx – identificação do agente que gerou o ´EndToEndId´, podendo ser: o ISPB do participante direto ou o ISPB do participante indireto (8 caracteres numéricos [0-9]);  

        • yyyyMMddHHmm – data, hora e minuto (12 caracteres), seguindo o horário UTC, da submissão da ordem de pagamento, caso a liquidação seja prioritária, ou prevista para o envio da ordem ao sistema de liquidação, caso seja realizado um agendamento. Para ordens prioritárias e não prioritárias, aceita-se o preenchimento, pelo agente que gerou o ´EndToEndId´, com uma tolerância máxima de 12 horas, para o futuro e para o passado, em relação ao horário efetivo de processamento da ordem pelo SPI;  

        • kkkkkkkkkkk – sequencial criado pelo agente que gerou o ´EndToEndId´ (11 caracteres alfanuméricos [a-z/A-Z/0-9]). Deve ser único dentro de cada “yyyyMMddHHmm”.  

        Admite-se que o ´EndToEndId´ seja gerado pelo participante direto, pelo participante indireto ou pelo iniciador de pagamento.
          
        Ele deve ser único, não podendo ser repetido em qualquer outra operação enviada ao SPI.

        No caso de Pix agendamento, a iniciadora deverá, no que tange a composição do endToEndId, utilizar a data para a qual o Pix está sendo agendado e horário fixo 15:00 UTC, que dará para a detentora a janela de efetivação de 00:00 e 23:59 do horário de Brasília.  
    EnumAccountPaymentsType:
      type: string
      enum:
        - CACC
        - SVGS
        - TRAN
      example: CACC
      description: |
        Tipos de contas usadas para pagamento.
        Modalidades tradicionais previstas pela Resolução 4.753, não contemplando contas vinculadas, 
        conta de domiciliados no exterior, contas em moedas estrangeiras e conta correspondente moeda eletrônica.
        Segue descrição de cada valor do ENUM.

        - CACC - Current - Conta Corrente.
        - SVGS - Savings - Conta de Poupança.
        - TRAN - TransactingAccount - Conta de Pagamento pré-paga.
    EnumAuthorisationStatusType:
      type: string
      enum:
        - AWAITING_AUTHORISATION
        - AUTHORISED
        - REJECTED
        - CONSUMED
      example: AWAITING_AUTHORISATION
      description: |
        Status atual do consentimento recorrente de acordo com a máquina de estados
        - AWAITING_AUTHORISATION
        - AUTHORISED
        - REJECTED
        - CONSUMED
    EnumErrorsCreatePixPayment:
      type: string
      enum:
        - PAGAMENTO_NAO_PERMITE_CANCELAMENTO
      example: PAGAMENTO_NAO_PERMITE_CANCELAMENTO
      description: |
        Códigos de erros previstos na criação da iniciação de pagamento:

        • PAGAMENTO_NAO_PERMITE_CANCELAMENTO: Pagamento não permite cancelamento
    EnumErrorsCreatePayment:
      type: string
      enum:
        - SALDO_INSUFICIENTE
        - VALOR_ACIMA_LIMITE
        - VALOR_INVALIDO
        - COBRANCA_INVALIDA
        - CONSENTIMENTO_INVALIDO
        - PARAMETRO_NAO_INFORMADO
        - PARAMETRO_INVALIDO
        - NAO_INFORMADO
        - PAGAMENTO_DIVERGENTE_CONSENTIMENTO
        - DETALHE_PAGAMENTO_INVALIDO
        - PAGAMENTO_RECUSADO_DETENTORA
        - PAGAMENTO_RECUSADO_SPI
        - ERRO_IDEMPOTENCIA
      example: SALDO_INSUFICIENTE
      description: |
        Códigos de erros previstos na criação da iniciação de pagamento:

        • SALDO_INSUFICIENTE: Esta conta não possui saldo suficiente para realizar o pagamento.

        • VALOR_ACIMA_LIMITE: O valor (ou quantidade de transações) ultrapassa a faixa de limite parametrizada na detentora para permitir a realização de transações pelo cliente.

        • VALOR_INVALIDO: O valor enviado não é válido para o QR Code informado.

        • COBRANCA_INVALIDA: Validação de expiração, validação de vencimento, Status Válido.

        • CONSENTIMENTO_INVALIDO: Consentimento inválido (status não é "authorised" ou está expirado).

        • PARAMETRO_NAO_INFORMADO: Parâmetro não informado.  

        • PARAMETRO_INVALIDO: Parâmetro inválido.

        • NAO_INFORMADO: Não informada pela detentora de conta.

        • PAGAMENTO_DIVERGENTE_CONSENTIMENTO: Dados do pagamento divergentes dos dados do consentimento.

        • DETALHE_PAGAMENTO_INVALIDO: Detalhe do pagamento inválido.

        • PAGAMENTO_RECUSADO_DETENTORA: Pagamento recusado pela detentora de conta.

        • PAGAMENTO_RECUSADO_SPI: Pagamento recusado no Sistema de Pagamentos Instantâneos (SPI).

        • ERRO_IDEMPOTENCIA: Erro idempotência.
    EnumLocalInstrument:
      type: string
      enum:
        - MANU
        - DICT
        - QRDN
        - QRES
        - INIC
      example: DICT
      description: |
        Especifica a forma de iniciação do pagamento:
        - MANU - Inserção manual de dados da conta transacional
        - DICT - Inserção manual de chave Pix
        - QRDN - QR code dinâmico
        - QRES - QR code estático
        - INIC - Indica que o recebedor (creditor) contratou o Iniciador de Pagamentos especificamente para realizar iniciações de pagamento em que o beneficiário é previamente conhecido.
    EnumPaymentCancellationStatusType:
      type: string
      enum:
        - REJECTED
      example: REJECTED
      description: |
        Estado para qual o pagamento deverá transitar
    EnumPaymentPersonType:
      type: string
      enum:
        - PESSOA_NATURAL
        - PESSOA_JURIDICA
      description: |
        Titular, pessoa natural ou juridica a quem se referem os dados de recebedor (creditor).
    EnumPaymentStatusType:
      type: string
      enum:
        - RCVD
        - CANC
        - ACCP
        - ACPD
        - RJCT
        - ACSC
        - PDNG
        - SCHD
      example: PDNG
      description: |
        Estado atual da iniciação de pagamento. O estado evolui na seguinte ordem:  

        1.  RCVD (Received) - Indica que a requisição de pagamento foi recebida com sucesso pela detentora, mas ainda há validações a serem feitas antes de ser submetida para liquidação.

        2.  CANC (Cancelled) - Indica que a transação Pix pendente foi cancelada com sucesso pelo usuário antes que fosse confirmada (ACCP) ou rejeitada (RJCT) pela detentora.

        3.  ACCP( Accepted Customer Profile) - Indica que todas as verificações necessárias já foram realizadas pela detentora e que a transação está pronta para ser enviada para liquidação (no SPI se for Pix para outra instituição ou internamente se for para outra conta na mesma instituição).

        4.  ACPD (Accepted Clearing Processed) - Indica que a detentora já submeteu a transação para liquidação, mas ainda não tem a confirmação se foi liquidada ou rejeitada.

        5.  RJCT (Rejected) Indica que a transação foi rejeitada pela detentora ou pelo SPI.

        6.  ACSC (Accepted Settlement Completed Debitor Account) - Indica que a transação foi efetivada pela detentora ou pelo SPI.

        7.  PDNG (Pending) - Indica que a detentora reteve temporariamente a transação Pix para análise.

        8.  SCHD (Scheduled) - Indica que a transação Pix foi agendada com sucesso na detentora.

        Em caso insucesso: 
         
        RJCT (REJECTED) - Instrução de pagamento rejeitada.
    EnumPaymentType:
      type: string
      enum:
        - PIX
      example: PIX
      description: |
        Este campo define o tipo de pagamento que será iniciado após a autorização do consentimento.
    EnumRejectionReasonType:
      type: string
      enum:
        - SALDO_INSUFICIENTE
        - VALOR_ACIMA_LIMITE
        - VALOR_INVALIDO
        - NAO_INFORMADO
        - PAGAMENTO_DIVERGENTE_CONSENTIMENTO
        - PAGAMENTO_RECUSADO_DETENTORA
        - PAGAMENTO_RECUSADO_SPI
        - FALHA_INFRAESTRUTURA_SPI
        - FALHA_INFRAESTRUTURA_ICP
        - FALHA_INFRAESTRUTURA_PSP_RECEBEDOR
        - FALHA_INFRAESTRUTURA_DETENTORA
        - CONSENTIMENTO_INVALIDO

      example: SALDO_INSUFICIENTE
      description: |
        Código identificador do motivo de rejeição.
        Motivo da rejeição do pagamento. Informações complementares sobre o motivo do status.  

        [Restrição] Esse motivo deverá ser enviado quando o campo /data/status for igual a RJCT (REJECTED).
    EnumPaymentCancellationReasonType:
      type: string
      enum:
        - CANCELADO_PENDENCIA
        - CANCELADO_AGENDAMENTO
        - CANCELADO_MULTIPLAS_ALCADAS
      example: CANCELADO_PENDENCIA
      description: |
        O preenchimento desse campo para retorno, deve ocorrer pela detentora de contas a partir do status em que o pagamento estiver no momento da solicitação do cancelamento (ex. Status de pagamento = PDNG, campo deve ser preenchido com enum CANCELADO_PENDENCIA)

        Valores possíveis:

        CANCELADO_PENDENCIA - Pagamento cancelado enquanto estava na situação PDNG

        CANCELADO_AGENDAMENTO - Pagamento cancelado enquanto estava na situação SCHD

        CANCELADO_MULTIPLAS_ALCADAS - Pagamento cancelado enquanto estava na situação PATC
    EnumPaymentCancellationFromType:
      type: string
      enum:
        - INICIADORA
        - DETENTORA
      example: INICIADORA
      description: |
        Campo utilizado para informar o meio pelo qual foi realizado o cancelamento.

        Valores possíveis:

        INICIADORA - Pagamento cancelado pelo usuário pagador nos canais da iniciadora

        DETENTORA - Pagamento cancelado pelo usuário pagador nos canais da detentora
    Rejection:
      type: object
      description: |
        Objeto contendo as informações de rejeição dos consentimentos. 
      required:
        - rejectedBy
        - rejectedFrom
        - rejectedAt
      properties:
        rejectedBy:
          type: string
          enum:
            - INICIADORA
            - USUARIO
            - DETENTORA
          example: INICIADORA
          description: |
            Quem iniciou a solicitação de rejeição
            - INICIADORA
            - USUARIO
            - DETENTORA
        rejectedFrom:
          type: string
          enum:
            - INICIADORA
            - DETENTORA
          example: DETENTORA
          description: |
            Canal onde iniciou-se o processo de rejeição 
            - INICIADORA
            - DETENTORA
        rejectedAt:
          type: string
          format: date-time
          example: '2021-05-21T08:30:00Z'
          pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
          maxLength: 20
          description: Data e hora em que o consentimento foi rejeitado
        reason:
          $ref: '#/components/schemas/ConsentRejectionReason'
    ConsentRejection:
      type: object
      description: |
        Objeto contendo as informações de rejeição dos consentimentos. 
      required:
        - EnumAuthorisationStatusType
        - rejectedBy
        - rejectedFrom
        - reason
      properties:
        EnumAuthorisationStatusType:
          type: string
          enum:
            - AWAITING_AUTHORISATION
            - AUTHORISED
            - REJECTED
            - CONSUMED
          example: AWAITING_AUTHORISATION
          description: |
            Status atual do consentimento recorrente de acordo com a máquina de estados
            - AWAITING_AUTHORISATION
            - AUTHORISED
            - REJECTED
            - CONSUMED
        rejectedBy:
          type: string
          enum:
            - INICIADORA
            - USUARIO
            - DETENTORA
          example: INICIADORA
          description: |
            Quem iniciou a solicitação de rejeição
            - INICIADORA
            - USUARIO
            - DETENTORA
        rejectedFrom:
          type: string
          enum:
            - INICIADORA
            - DETENTORA
          example: DETENTORA
          description: |
            Canal onde iniciou-se o processo de rejeição 
            - INICIADORA
            - DETENTORA
        reason:
          $ref: '#/components/schemas/ConsentRejectionReason'
    ConsentRejectionReason:
      type: object
      description: |
        Informações sobre o motivo da rejeição 
      required:
        - code
        - detail
      properties:
        code:
          type: string
          enum:
            - NAO_INFORMADO
            - FALHA_INFRAESTRUTURA
            - TEMPO_EXPIRADO_AUTORIZACAO
            - REJEITADO_USUARIO
            - CONTAS_ORIGEM_DESTINO_IGUAIS
            - CONTA_NAO_PERMITE_PAGAMENTO
            - SALDO_INSUFICIENTE
            - VALOR_ACIMA_LIMITE
          example: VALOR_ACIMA_LIMITE
          description: |
            Código indicador do motivo de rejeição.
            - NAO_INFORMADO
            - FALHA_INFRAESTRUTURA
            - TEMPO_EXPIRADO_AUTORIZACAO
            - REJEITADO_USUARIO
            - CONTAS_ORIGEM_DESTINO_IGUAIS
            - CONTA_NAO_PERMITE_PAGAMENTO
            - SALDO_INSUFICIENTE
            - VALOR_ACIMA_LIMITE
        detail:
          type: string
          pattern: '[\w\W\s]*'
          maxLength: 2048
          description: |
            Detalhe sobre o motivo de rejeição indicado no campo "/data/rejection/reason/code"
          example: O usuário rejeitou a autorização do consentimento 
    RejectionReason:
      type: object
      description: |
        Objeto contendo o motivo de rejeição assíncrono
      required:
        - code
        - detail
      properties:
        code:
          $ref: '#/components/schemas/EnumRejectionReasonType'
        detail:
          type: string
          pattern: '[\w\W\s]*'
          maxLength: 2048
          description: Detalhe sobre o código identificador do motivo de rejeição.
    Revocation:
      type: object
      description: Objeto contendo as informações de revogação dos consentimentos de longa duração.
      required:
        - revokedBy
        - revokedFrom
        - revokedAt
      properties:
        revokedBy:
            type: string
            enum:
              - INICIADORA
              - USUARIO
              - DETENTORA
            example: INICIADORA
            description: |
              Quem iniciou a solicitação de revogação 
              - INICIADORA
              - USUARIO
              - DETENTORA
        revokedFrom:
          type: string
          enum:
            - INICIADORA
            - DETENTORA
          example: DETENTORA
          description: |
            Canal onde iniciou-se o processo de revogação 
            - INICIADORA
            - DETENTORA
        revokedAt:
          type: string
          format: date-time
          example: '2021-05-21T08:30:00Z'
          pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
          maxLength: 20
          description: Data e hora em que o consentimento foi revogado 
        reason:
          $ref: '#/components/schemas/ConsentRevokedReason'
    ConsentRevocation:
      type: object
      description: Objeto contendo as informações de revogação dos consentimentos de longa duração.
      required:
        - EnumAuthorisationStatusType
        - revokedBy
        - revokedFrom
        - reason
      properties:
        EnumAuthorisationStatusType:
          type: string
          enum:
            - AWAITING_AUTHORISATION
            - AUTHORISED
            - REJECTED
            - CONSUMED
          example: AWAITING_AUTHORISATION
          description: |
            Status atual do consentimento recorrente de acordo com a máquina de estados
            - AWAITING_AUTHORISATION
            - AUTHORISED
            - REJECTED
            - CONSUMED
        revokedBy:
            type: string
            enum:
              - INICIADORA
              - USUARIO
              - DETENTORA
            example: INICIADORA
            description: |
              Quem iniciou a solicitação de revogação 
              - INICIADORA
              - USUARIO
              - DETENTORA
        revokedFrom:
          type: string
          enum:
            - INICIADORA
            - DETENTORA
          example: DETENTORA
          description: |
            Canal onde iniciou-se o processo de revogação 
            - INICIADORA
            - DETENTORA
        reason:
          $ref: '#/components/schemas/ConsentRevokedReason'
    ConsentRevokedReason:
      type: object
      description: |
        Informações sobre o motivo da revogado
      required:
        - code
        - detail
      properties:
        code:
          type: string
          enum:
            - REVOGADO_RECEBEDOR
            - REVOGADO_USUARIO
            - NAO_INFORMADO
          example: REVOGADO_RECEBEDOR
          description: |
            Código indicador do motivo de revogação.
            - REVOGADO_RECEBEDOR
            - REVOGADO_USUARIO
            - NAO_INFORMADO
        detail:
          type: string
          pattern: '[\w\W\s]*'
          maxLength: 2048
          description: |
            Detalhe sobre o motivo de revogação indicado no campo "/data/rejection/reason/code".
          example: O usuário rejeitou a autorização do consentimento 
    RecurringConfiguration:
      type: object
      description: Campo destinado a configuração dos diferentes produtos de pagamentos recorrentes.
      properties:
        recurringConfiguration:
          oneOf:
            - $ref: '#/components/schemas/Automatic'
            - $ref: '#/components/schemas/Sweeping'
            - $ref: '#/components/schemas/Vrp'
    Automatic:
      type: object
      description: Definição da configuração de recorrência para pagamentos automáticos
      required:
        - contractId
        - amount
        - transactionLimit
        - period
        - contractDebtor
      properties:
        contractId:
          type: string
          pattern: '^[a-zA-Z0-9]{1,35}$'
          maxLength: 35
          example: XE00038166201907261559y6j6
          description: Identificador do contrato de transação
        amount:
          type: string
          pattern: '^((\d{1,16}\.\d{2}))$'
          minLength: 4
          maxLength: 19
          example: '100000.12'
          description: Valor da transação com 2 casas decimais. Se enviado, subentende-se um valor de transação fixo que não pode sofrer alterações durante a vida útil do consentimento.
        transactionLimit:
          type: string
          pattern: '^((\d{1,16}\.\d{2}))$'
          minLength: 4
          maxLength: 19
          example: '100000.12'
          description: Valor da transação com 2 casas decimais. Se enviado, subentende-se um valor de transação variável poderá sofrer alterações durante a vida útil do consentimento
        period:
          type: string
          enum:
            - DIARIO
            - SEMANAL
            - MENSAL
            - ANUAL
          example: DIARIO
          description: |
            Define a periodicidade permitida para realização de transações
            - DIARIO
            - SEMANAL
            - MENSAL
            - ANUAL
        dayOfMonth:
          type: integer
          format: int32
          pattern: '^((\d{1,16}\.\d{2}))$'
          maxLength: 31
          example: 10
          description: |
            Dia fixo do mês que está prevista a transação.

            [Restrição] Campo deve ser enviado quando o campo "/data/recurringConfiguration/automatic/period" for igual a MENSAL ou ANUAL.
        dayOfWeek:
          type: string
          enum:
            - SEGUNDA_FEIRA
            - TERCA_FEIRA
            - QUARTA_FEIRA
            - QUINTA_FEIRA
            - SEXTA_FEIRA
          example: 'SEGUNDA_FEIRA'
          description: |
            Dia da semana que está prevista a transação.
            - SEGUNDA_FEIRA
            - TERCA_FEIRA
            - QUARTA_FEIRA
            - QUINTA_FEIRA
            - SEXTA_FEIRA

            [Restrição] Campo deve ser enviado quando o campo "/data/recurringConfiguration/automatic/period" for igual a SEMANAL.
        month:
          type: string
          enum:
            - JANEIRO
            - FEVEREIRO
            - MARCO
            - ABRIL
            - MAIO
            - JUNHO
            - JULHO
            - AGOSTO
            - SETEMBRO
            - OUTUBRO
            - NOVEMBRO
            - DEZEMBRO
          example: 'JANEIRO'
          description: |
            Mês previstos para ocorrer transações.
            - JANEIRO
            - FEVEREIRO
            - MARCO
            - ABRIL
            - MAIO
            - JUNHO
            - JULHO
            - AGOSTO
            - SETEMBRO
            - OUTUBRO
            - NOVEMBRO
            - DEZEMBRO

            [Restrição] Campo deve ser enviado quando o campo "/data/recurringConfiguration/automatic/period" for igual a ANUAL
        contractDebtor:
          $ref: '#/components/schemas/ContractDebtor'
        immediatePayment:
          $ref: '#/components/schemas/ImmediatePayment'
    ContractDebtor:
      type: object
      description: Informações sobre o cliente devedor do contrato.
      required: 
        - name
        - document
      properties:
        name:
          type: string
          pattern: ^([A-Za-zÀ-ÖØ-öø-ÿ,.@:&*+_<>()!?/\\$%\d' -]+)$
          maxLength: 120
          example: Policarpo Quaresma
          description: Em caso de pessoa natural deve ser informado o nome completo do titular da conta do recebedor. Em caso de pessoa jurídica deve ser informada a razão social ou o nome fantasia da conta do recebedor.
        document:
            type: object
            required:
              - identification
              - rel
            properties:
              identification:
                type: string
                maxLength: 14
                description: Número do documento de identificação oficial do cliente devedor do contrato.
                example: '11111111111111'
                pattern: '^\d{14}$'
              rel:
                type: string
                maxLength: 4
                description: Tipo do documento de identificação oficial do cliente devedor do contrato.
                example: CNPJ
                pattern: '^[A-Z]{4}$'
    ImmediatePayment:
      type: object
      description: Definições para transação imediata.
      required:
        - type
        - date
        - currency
        - amount
        - creditorAccount
      properties:
        type:
          $ref: '#/components/schemas/EnumPaymentType'
        date:
          type: string
          format: date
          maxLength: 10
          pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])$'
          example: '2021-01-01'
          description: |  
            Define a data alvo da liquidação do pagamento.
            O fuso horário de Brasília deve ser utilizado para criação e racionalização sobre os dados deste campo.
        currency:
          type: string
          maxLength: 3
          pattern: '^([A-Z]{3})$'
          example: BRL
          description: |
            Código da moeda nacional segundo modelo ISO-4217, ou seja, 'BRL'.
            Todos os valores monetários informados estão representados com a moeda vigente do Brasil.
        amount:
          type: string
          minLength: 4
          maxLength: 19
          pattern: '^((\d{1,16}\.\d{2}))$'
          example: '100000.12'
          description: |
            Valor da transação com 2 casas decimais.
        remittanceInformation:
          type: string
          maxLength: 140
          pattern: '^[\w\W\s]*'
          example: '100000.12'
          description: |
            Deve ser preenchido sempre que o usuário pagador inserir alguma informação adicional em um pagamento, a ser enviada ao recebedor.
        creditorAccount:
          $ref: '#/components/schemas/PostCreditorAccount'
    PostSweeping:
      type: object
      description: Definição da configuração de recorrência para transferências automáticas de fundos.
      required:
        - amount
        - transactionLimit
      properties:
        amount:
          type: string
          minLength: 4
          maxLength: 19
          pattern: '^((\d{1,16}\.\d{2}))$'
          example: '100000.12'
          description: |
            Valor da transação com 2 casas decimais.
        transactionLimit:
          type: string
          pattern: '^((\d{1,16}\.\d{2}))$'
          minLength: 4
          maxLength: 19
          example: '100000.12'
          description: Valor da transação com 2 casas decimais. Se enviado, subentende-se um valor de transação variável, o qual poderá sofrer alterações durante a vida útil do consentimento.
        periodicLimits:
          $ref: "#/components/schemas/PeriodicLimits"
    Sweeping:
      type: object
      description: Definição da configuração de recorrência para transferências automáticas de fundos.
      properties:
        amount:
          type: string
          minLength: 4
          maxLength: 19
          pattern: '^((\d{1,16}\.\d{2}))$'
          example: '100000.12'
          description: |
            Valor da transação com 2 casas decimais.
        transactionLimit:
          type: string
          pattern: '^((\d{1,16}\.\d{2}))$'
          minLength: 4
          maxLength: 19
          example: '100000.12'
          description: Valor da transação com 2 casas decimais. Se enviado, subentende-se um valor de transação variável, o qual poderá sofrer alterações durante a vida útil do consentimento.
        periodicLimits:
          $ref: "#/components/schemas/PeriodicLimits"
    PeriodicLimits:
      type: object
      description: Limites transacionais por período determinado pelo usuário pagador.
      properties:
        day:
          $ref: '#/components/schemas/Day'
        week:
          $ref: '#/components/schemas/Week'
        month:
          $ref: '#/components/schemas/Month'
        year:
          $ref: '#/components/schemas/Year'
    Vrp:
      type: object
      description: Definição da configuração de recorrência para realização de transações de valores variáveis 
      properties:
        transactionLimit:
          type: string
          pattern: '^((\d{1,16}\.\d{2}))$'
          minLength: 4
          maxLength: 19
          example: '100000.12'
          description: Limite máximo de valor permitido para cada transação de pagamento.
        globalLimits:
          type: object
          description: Limite transacional máximo para pagamentos, após atingir este valor, o consentimento deve ir para o status "CONSUMED".
          properties:
            quantityLimit:
              type: integer
              example: 10
              description: Quantidade máxima de ocorrência  de pagamentos, apos atingir este valor, o consentimento deve ir para o status "CONSUMED"
            transactionLimit:
              type: string
              pattern: '^((\d{1,16}\.\d{2}))$'
              minLength: 4
              maxLength: 19
              example: '100000.12'
              description: Valor transacional máximo para pagamentos sob este consentimento, após atingir este valor, o consentimento deve ir para o status "CONSUMED".
        periodicLimits:
          type: object
          description: Limites transacionais por período determinado pelo usuário pagador.
          properties:
            day:
              $ref: '#/components/schemas/Day'
            week:
              $ref: '#/components/schemas/Week'
            month:
              $ref: '#/components/schemas/Month'
            year:
              $ref: '#/components/schemas/Year'
    Day:
      type: object
      description: |
        Configurar limite transacional diário determinado pelo usuário pagador.
        
        [Restrição] Caso enviado o objeto, ao menos um dos campos (<code>quantityLimit</code> ou <code>transactionLimit</code>) devem ser preenchidos.
      properties:
        quantityLimit:
          type: integer
          example: 2
          description: Quantidade limite de transações permitidas para ocorrer durante um dia.
        transactionLimit:
          type: string
          pattern: '^((\d{1,16}\.\d{2}))$'
          minLength: 4
          maxLength: 19
          example: '100000.12'
          description: Valor máximo a ser transacionado diariamente.
    Week:
      type: object
      description: |
        Configurar limite transacional semanal determinado pelo usuário pagador.
        
        [Restrição] Caso enviado o objeto, ao menos um dos campos (<code>quantityLimit</code> ou <code>transactionLimit</code>) devem ser preenchidos
      properties:
        quantityLimit:
          type: integer
          example: 2
          description: Quantidade limite de transações permitidas para ocorrer durante uma semana.
        transactionLimit:
          type: string
          pattern: '^((\d{1,16}\.\d{2}))$'
          minLength: 4
          maxLength: 19
          example: '100000.12'
          description: Valor máximo a ser transacionado semanalmente.
    Month:
      type: object
      description: |
        Configurar limite transacional mensal determinado pelo usuário pagador.
        
        [Restrição] Caso enviado o objeto, ao menos um dos campos (<code>quantityLimit</code> ou <code>transactionLimit</code>) devem ser preenchidos
      properties:
        quantityLimit:
          type: integer
          example: 2
          description: Quantidade limite de transações permitidas para ocorrer durante um mês.
        transactionLimit:
          type: string
          pattern: '^((\d{1,16}\.\d{2}))$'
          minLength: 4
          maxLength: 19
          example: '100000.12'
          description: Valor máximo a ser transacionado mensalmente.
    Year:
      type: object
      description: |
        Configurar limite transacional anual determinado pelo usuário pagador.
        
        [Restrição] Caso enviado o objeto, ao menos um dos campos (<code>quantityLimit</code> ou <code>transactionLimit</code>) devem ser preenchidos
      properties:
        quantityLimit:
          type: integer
          example: 2
          description: Quantidade limite de transações permitidas para ocorrer durante um ano. 
        transactionLimit:
          type: string
          pattern: '^((\d{1,16}\.\d{2}))$'
          minLength: 4
          maxLength: 19
          example: '100000.12'
          description: Valor máximo a ser transacionado por um ano, a partir da data definida no campo "/data/startDateTime".
    Creditors:
      type: array
      minItems: 1
      items:
        type: object
        description: Objeto contendo os dados do recebedor (creditor).
        required:
          - personType
          - cpfCnpj
          - name
        properties:
          personType:
            $ref: '#/components/schemas/EnumPaymentPersonType'
          cpfCnpj:
            type: string
            minLength: 11
            maxLength: 14
            pattern: '^\d{11}$|^\d{14}$'
            example: '58764789000137'
            description: |
              Identificação da pessoa envolvida na transação.  
              Preencher com o CPF ou CNPJ, de acordo com o valor escolhido no campo type.  
              O CPF será utilizado com 11 números e deverá ser informado sem pontos ou traços.  
              O CNPJ será utilizado com 14 números e deverá ser informado sem pontos ou traços.
          name:
            type: string
            pattern: ^([A-Za-zÀ-ÖØ-öø-ÿ,.@:&*+_<>()!?/\\$%\d' -]+)$
            maxLength: 120
            example: Marco Antonio de Brito
            description: |
              Em caso de pessoa natural deve ser informado o nome completo do titular da conta do recebedor.  
              Em caso de pessoa jurídica deve ser informada a razão social ou o nome fantasia da conta do recebedor.
    LoggedUser:
      type: object
      description: Usuário (pessoa natural) que encontra-se logado na instituição Iniciadora de Pagamento.
      required:
        - document
      properties:
        document:
          type: object
          required:
            - identification
            - rel
          properties:
            identification:
              type: string
              maxLength: 11
              description: Número do documento de identificação oficial do usuário.
              example: '11111111111'
              pattern: '^\d{11}$'
            rel:
              type: string
              maxLength: 3
              description: Tipo do documento de identificação oficial do usuário.
              example: CPF
              pattern: '^[A-Z]{3}$'
    Meta:
      type: object
      description: Meta informação referente a API requisitada.
      required:
        - requestDateTime
      properties:
        requestDateTime:
          description: 'Data e hora da consulta, conforme especificação RFC-3339, formato UTC.'
          type: string
          pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
          maxLength: 20
          format: date-time
          example: '2021-05-21T08:30:00Z'
    LinkSingle:
      type: object
      description: Referências para outros recusos da API requisitada.
      required:
        - self
      properties:
        self:
          type: string
          format: uri
          maxLength: 2000
          description: URI completo que gerou a resposta atual.
          example: 'https://api.banco.com.br/open-banking/api/v1/resource'
          pattern: '^(https:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)$'
    PaymentPix:
      type: object
      description: Objeto contendo dados do pagameto como moeda e valor.
      required:
        - amount
        - currency
      properties:
        amount:
          type: string
          minLength: 4
          maxLength: 19
          pattern: '^((\d{1,16}\.\d{2}))$'
          example: '100000.12'
          description: |
           Código da moeda nacional segundo modelo ISO-4217, ou seja, 'BRL'. Todos os valores monetários informados estão representados com a moeda vigente do Brasil.
        currency:
          type: string
          maxLength: 3
          pattern: '^([A-Z]{3})$'
          example: BRL
          description: |
            Valor da transação com 2 casas decimais.
    PatchPixPayment:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/PatchPixPaymentData'
    PatchPixPaymentData:
      type: object
      required:
        - status
        - cancellation
      properties:
        status:
          $ref: '#/components/schemas/EnumPaymentCancellationStatusType'
        cancellation:
          type: object
          description: |
           Informações gerais sobre o cancelamento.
          required:
            - cancelledBy
          properties:
            cancelledBy:
              type: object
              description: Informações gerais sobre o usuário que solicitou o cancelamento.
              required:
                - document
              properties:
                document:
                  type: object
                  description: Objeto que consolida os dados do documento do usuário que solicitou o cancelamento.
                  required:
                    - identification
                    - rel
                  properties:
                    identification:
                      type: string
                      maxLength: 11
                      description: Número do documento de identificação oficial do usuário.
                      example: '11111111111'
                      pattern: '^\d{11}$'
                    rel:
                      type: string
                      maxLength: 3
                      description: Tipo do documento de identificação oficial do usuário.
                      example: CPF
                      pattern: '^[A-Z]{3}$'
    PixPaymentCancellation:
      type: object
      description: |
        Objeto que contém os dados referentes ao usuário pagador que solicitou o cancelamento, o canal utilizado por ele e o motivo.  

        [Restrição] O objeto cancellation será obrigatório apenas quando o valor do campo status for igual a CANC. 
      required:
        - cancelledAt
        - cancelledBy
        - reason
        - cancelledFrom
      properties:
        reason:
          $ref: '#/components/schemas/EnumPaymentCancellationReasonType'
        cancelledFrom:
          $ref: '#/components/schemas/EnumPaymentCancellationFromType'
        cancelledAt:
          type: string
          description: 'Data e hora que foi realizado o cancelamento, conforme especificação RFC-3339, formato UTC.'
          format: date-time
          maxLength: 20
          pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
          example: '2021-05-21T08:30:00Z'
        cancelledBy:
          type: object
          description: Informação relacionada ao usuário pagador que solicitou o cancelamento do pagamento.
          required:
            - document
          properties:
            document:
              type: object
              description: Objeto que consolida os dados do documento do usuário que solicitou o cancelamento.
              required:
                - identification
                - rel
              properties:
                identification:
                  type: string
                  maxLength: 11
                  description: Número do documento do usuário pagador responsável pelo cancelamento do pagamento.
                  example: '11111111111'
                  pattern: '^\d{11}$'
                rel:
                  type: string
                  maxLength: 3
                  description: Tipo do documento do usuário pagador responsável pelo cancelamento do pagamento.
                  example: CPF
                  pattern: '^[A-Z]{3}$'
    ResponseError:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          minItems: 1
          maxItems: 13
          items:
            type: object
            required:
              - code
              - title
              - detail
            properties:
              code:
                description: Código de erro específico do endpoint
                type: string
                pattern: '[\w\W\s]*'
                maxLength: 255
              title:
                description: Título legível por humanos deste erro específico
                type: string
                pattern: '[\w\W\s]*'
                maxLength: 255
              detail:
                description: Descrição legível por humanos deste erro específico
                type: string
                pattern: '[\w\W\s]*'
                maxLength: 2048
        meta:
          type: object
          description: Meta informações referente à API requisitada.
          required:
            - requestDateTime
          properties:
            requestDateTime:
              description: 'Data e hora da consulta, conforme especificação RFC-3339, formato UTC.'
              type: string
              maxLength: 20
              format: date-time
              example: '2021-05-21T08:30:00Z'
    ResponseRecurringConsent:
      type: object
      required:
        - data
        - links
        - meta
      properties:
        data:
          type: object
          description: Objeto contendo as informações de consentimento para a iniciação de pagamento individual.
          required:
            - recurringConsentId
            - statusUpdateDateTime
            - loggedUser
            - businessEntity
            - status
            - creditors
            - startDateTime
            - creationDateTime
            - expirationDateTime
            - recurringConfiguration
          properties:
            recurringConsentId:
              type: string
              pattern: '^urn:[a-zA-Z0-9][a-zA-Z0-9\-]{0,31}:[a-zA-Z0-9()+,\-.:=@;$_!*''%\/?#]+$'
              maxLength: 100
              description: |
                Identificador único do consentimento de longa duração criado para a iniciação de pagamento solicitada. Deverá ser um URN - Uniform Resource Name. Um URN, conforme definido na RFC8141 é um Uniform Resource Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN seja um identificador de recurso persistente e independente da localização.
                Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:  
                - o namespace(urn)  
                - o identificador associado ao namespace da instituição transnmissora (bancoex)  
                - o identificador específico dentro do namespace (C1DD33123). Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na RFC8141.
            statusUpdateDateTime:
              type: string
              format: date-time
              example: '2021-05-21T08:30:00Z'
              pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
              maxLength: 20
              description: |
                Data e hora em que o consentimento teve o status atualizado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
            loggedUser:
              $ref: '#/components/schemas/LoggedUser'
            businessEntity:
              $ref: '#/components/schemas/BusinessEntity'
            status:
              $ref: '#/components/schemas/EnumAuthorisationStatusType'
            creditors:
              $ref: '#/components/schemas/Creditors'
            startDateTime:
              description: Data e hora em que o consentimento deve passar a ser válido. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
              type: string
              format: date-time
              example: '2021-05-21T08:30:00Z'
              pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
              maxLength: 20
            creationDateTime:
              description: Data e hora em que o consentimento foi criado. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
              type: string
              format: date-time
              example: '2021-05-21T08:30:00Z'
              pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
              maxLength: 20
            expirationDateTime:
              description: Data e hora em que o consentimento deve deixar de ser válido. Uma string com data e hora conforme especificação RFC-3339, sempre com a utilização de timezone UTC(UTC time format).
              type: string
              format: date-time
              example: '2021-05-21T08:30:00Z'
              pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
              maxLength: 20
            additionalInformation:
              description: Deve ser preenchido sempre que o usuário pagador inserir alguma informação adicional no consentimento
              type: string
              example: 'Minha recorrência'
              pattern: '[\w\W\s]*'
              maxLength: 140
            debtorAccount:
              $ref: '#/components/schemas/ConsentsDebtorAccount'
            rejection:
              $ref: '#/components/schemas/Rejection'
            revocation:
              $ref: '#/components/schemas/Revocation'
            recurringConfiguration:
              $ref: '#/components/schemas/RecurringConfiguration'
        links:
          $ref: '#/components/schemas/LinkSingle'
        meta:
          $ref: '#/components/schemas/Meta'
    PatchRecurringConsent:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: '#/components/schemas/ConsentRevocation'
            - $ref: '#/components/schemas/ConsentRejection'
    ResponseRecurringPaymentsIdRead:
      type: object
      required:
        - data
        - links
        - meta
      properties:
        data:
          $ref: '#/components/schemas/ResponseRecurringPaymentsData'
        links:
          $ref: '#/components/schemas/LinkSingle'
        meta:
          $ref: '#/components/schemas/Meta'
    ResponseRecurringPixPayment:
      type: object
      required:
        - data
        - links
        - meta
      properties:
        data:
          $ref: '#/components/schemas/ResponseRecurringPixData'
        links:
          $ref: '#/components/schemas/LinkSingle'
        meta:
          $ref: '#/components/schemas/Meta'
    ResponseCreatePixPayment:
      type: object
      required:
        - data
        - links
        - meta
      properties:
        data:
          type: array
          items:
            type: object
            description: Objeto contendo dados do pagamento e da conta do recebedor (creditor).
            required:
              - paymentId
              - endToEndId
              - creationDateTime
              - statusUpdateDateTime
              - status
              - localInstrument
              - payment
              - creditorAccount
              - cnpjInitiator
              - debtorAccount
            properties:
              paymentId:
                type: string
                minLength: 1
                maxLength: 100
                pattern: '^[a-zA-Z0-9][a-zA-Z0-9\-]{0,99}$'
                example: TXpRMU9UQTROMWhZV2xSU1FUazJSMDl
                description: |
                  Código ou identificador único informado pela instituição detentora da conta para representar
                  a iniciação de pagamento individual. O `paymentId` deve ser diferente do `endToEndId`.
                  Este é o identificador que deverá ser utilizado na consulta ao status da iniciação de pagamento efetuada.
              endToEndId:
                $ref: '#/components/schemas/EndToEndId'
              consentId:
                type: string
                maxLength: 256
                pattern: '^urn:[a-zA-Z0-9][a-zA-Z0-9\-]{0,31}:[a-zA-Z0-9()+,\-.:=@;$_!*''%\/?#]+$'
                example: 'urn:bancoex:C1DD33123'
                description: |
                  Identificador único do consentimento criado para a iniciação de pagamento solicitada. Deverá ser um URN - Uniform Resource Name.
                  Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource
                  Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN
                  seja um identificador de recurso persistente e independente da localização.
                  Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
                  - o namespace(urn)
                  - o identificador associado ao namespace da instituição transnmissora (bancoex)
                  - o identificador específico dentro do namespace (C1DD33123).
                  Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).  

                  [Restrição] Este campo é de preenchimento obrigatório quando o valor do campo authorisationFlow for igual a FIDO_FLOW.
              creationDateTime:
                type: string
                format: date-time
                pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
                example: '2020-07-21T08:30:00Z'
                description: |
                  Data e hora em que o recurso foi criado.
                  Uma string com data e hora conforme especificação RFC-3339,
                  sempre com a utilização de timezone UTC(UTC time format).
              statusUpdateDateTime:
                type: string
                format: date-time
                pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
                example: '2020-07-21T08:30:00Z'
                description: |
                  Data e hora da última atualização da iniciação de pagamento.
                  Uma string com data e hora conforme especificação RFC-3339,
                  sempre com a utilização de timezone UTC(UTC time format).
              proxy:
                type: string
                maxLength: 77
                pattern: '[\w\W\s]*'
                example: '12345678901'
                description: |
                  Chave cadastrada no DICT pertencente ao recebedor. Os tipos de chaves podem ser: telefone, e-mail, cpf/cnpj ou chave aleatória.
                  No caso de telefone celular deve ser informado no padrão E.1641.
                  Para e-mail deve ter o formato xxxxxxxx@xxxxxxx.xxx(.xx) e no máximo 77 caracteres.
                  No caso de CPF deverá ser informado com 11 números, sem pontos ou traços.
                  Para o caso de CNPJ deverá ser informado com 14 números, sem pontos ou traços.
                  No caso de chave aleatória deve ser informado o UUID gerado pelo DICT, conforme formato especificado na RFC41223.
                  Se informado, a detentora da conta deve validar o proxy no DICT quando localInstrument for igual a DICT, QRDN ou QRES e validar o campo creditorAccount.
                  Esta validação é opcional caso o localInstrument for igual a INIC.
                  [Restrição] Se localInstrument for igual a MANU, o campo proxy não deve ser preenchido. Se localInstrument for igual INIC, DICT, QRDN ou QRES, o campo proxy deve ser sempre preenchido com a chave Pix.
              ibgeTownCode:
                type: string
                minLength: 7
                maxLength: 7
                pattern: '^\d{7}$'
                example: '5300108'
                description: |
                  O campo ibgetowncode no arranjo PIX, tem o mesmo comportamento que o campo codMun descrito no item 1.6.6 do manual do PIX, conforme segue:

                  1. Caso a informação referente ao município não seja enviada; o PSP do recebedor assumirá que não existem feriados estaduais e municipais no período em questão;
              status:
                $ref: '#/components/schemas/EnumPaymentStatusType'
              rejectionReason:
                $ref: '#/components/schemas/RejectionReason'
              localInstrument:
                $ref: '#/components/schemas/EnumLocalInstrument'
              cnpjInitiator:
                type: string
                pattern: '^\d{14}$'
                maxLength: 14
                example: '50685362000135'
                description: CNPJ do Iniciador de Pagamento devidamente habilitado para a prestação de Serviço de Iniciação no Pix.
              payment:
                type: object
                description: Objeto contendo dados do pagameto como moeda e valor.
                required:
                  - amount
                  - currency
                properties:
                  amount:
                    type: string
                    minLength: 4
                    maxLength: 19
                    pattern: '^((\d{1,16}\.\d{2}))$'
                    example: '100000.12'
                    description: |
                      Valor da transação com 2 casas decimais. O valor deve ser o mesmo enviado no consentimento. 

                      Para QR Code estático com valor pré-determinado no QR Code ou para QR Code dinâmico com indicação de que o valor não pode ser alterado: O campo amount deve ser preenchido com o valor estabelecido no QR Code. 
                      Caso seja preenchido com valor divergente do QR Code, deve ser retornado um erro HTTP Status 422.
                  currency:
                    type: string
                    maxLength: 3
                    pattern: '^([A-Z]{3})$'
                    example: BRL
                    description: |
                      Código da moeda nacional segundo modelo ISO-4217, ou seja, 'BRL'.  
                      Todos os valores monetários informados estão representados com a moeda vigente do Brasil.
              transactionIdentification:
                type: string
                pattern: '^[a-zA-Z0-9]{1,35}$'
                maxLength: 35
                example: E00038166201907261559y6j6
                description: |
                  Trata-se de um identificador de transação que deve ser retransmitido intacto pelo PSP do pagador ao gerar a ordem de pagamento.

                  [Restrição] A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora, caso ele tenha sido enviado na requisição da iniciação do pagamento.
              remittanceInformation:
                type: string
                maxLength: 140
                pattern: '[\w\W\s]*'
                example: Pagamento da nota RSTO035-002.
                description: |
                  Deve ser preenchido sempre que o usuário pagador inserir alguma informação adicional em um pagamento, a ser enviada ao recebedor.
              creditorAccount:
                $ref: '#/components/schemas/CreditorAccount'
              debtorAccount:
                $ref: '#/components/schemas/DebtorAccount' 
              authorisationFlow:
                type: string
                enum:
                  - HYBRID_FLOW
                  - CIBA_FLOW
                  - FIDO_FLOW
                example: HYBRID_FLOW
                description: |
                  Campo condicional utilizado para identificar o fluxo de autorização em que o pagamento foi solicitado.
                  
                  [Restrição] Se CIBA ou FIDO, preenchimento obrigatório. Caso o campo não esteja presente no payload, subentende-se que o fluxo de autorização utilizado é o HYBRID_FLOW.
        links:
          $ref: '#/components/schemas/LinkSingle'
        meta:
          $ref: '#/components/schemas/Meta'
    ResponseRecurringPixData:
      type: array
      items:
        type: object
        required:
          - recurringPaymentId
          - recurringConsentId
          - endToEndId
          - date
          - creationDateTime
          - statusUpdateDateTime  
          - status
          - payment
        properties:
          recurringPaymentId:
            type: string
            minLength: 1
            maxLength: 100
            pattern: '^[a-zA-Z0-9][a-zA-Z0-9\-]{0,99}$'
            example: TXpRMU9UQTROMWhZV2xSU1FUazJSMDl
            description: |
              Código ou identificador único informado pela instituição detentora da conta para representar a iniciação de pagamento. O `recurringPaymentId` deve ser diferente do `endToEndId`. 
              Este é o identificador que deverá ser utilizado na consulta ao status da iniciação de pagamento efetuada.
          recurringConsentId:
            type: string
            maxLength: 256
            pattern: '^urn:[a-zA-Z0-9][a-zA-Z0-9\-]{0,31}:[a-zA-Z0-9()+,\-.:=@;$_!*''%\/?#]+$'
            example: 'urn:bancoex:C1DD33123'
            description: |
              Identificador único do consentimento criado para a iniciação de pagamento solicitada. Deverá ser um URN - Uniform Resource Name.
              Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource
              Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN
              seja um identificador de recurso persistente e independente da localização.
              Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
              - o namespace(urn)
              - o identificador associado ao namespace da instituição transnmissora (bancoex)
              - o identificador específico dentro do namespace (C1DD33123).
              Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
          endToEndId:
            $ref: '#/components/schemas/EndToEndId'
          date:
            type: string
            maxLength: 10
            pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])$'
            example: '2023-10-10'
            description: Data em que o recurso foi criado. Uma string com a utilização de timezone UTC(UTC time format).
          creationDateTime:
            type: string
            format: date-time
            maxLength: 20
            pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
            example: '2020-07-21T08:30:00Z'
            description: |
              Data e hora em que o recurso foi criado.
              Uma string com data e hora conforme especificação RFC-3339,
              sempre com a utilização de timezone UTC(UTC time format).
          statusUpdateDateTime:
            type: string
            format: date-time
            maxLength: 20
            pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
            example: '2020-07-21T08:30:00Z'
            description: |
              Data e hora da última atualização da iniciação de pagamento.
              Uma string com data e hora conforme especificação RFC-3339,
              sempre com a utilização de timezone UTC(UTC time format).
          status:
            $ref: '#/components/schemas/EnumPaymentStatusType'
          rejectionReason:
            $ref: '#/components/schemas/RejectionReason'
          payment:
            $ref: '#/components/schemas/PaymentPix'
          remittanceInformation:
            type: string
            maxLength: 140
            pattern: '[\w\W\s]*'
            example: Pagamento da nota RSTO035-002.
            description: |
              Deve ser preenchido sempre que o usuário pagador inserir alguma informação adicional em um pagamento, a ser enviada ao recebedor.
    ResponseRecurringPaymentsData:
      type: object
      required:
        - recurringPaymentId
        - recurringConsentId
        - endToEndId
        - date
        - creationDateTime
        - statusUpdateDateTime  
        - ibgeTownCode
        - status
        - cnpjInitiator
        - payment
        - creditorAccount
        - debtorAccount
      properties:
        recurringPaymentId:
          type: string
          minLength: 1
          maxLength: 100
          pattern: '^[a-zA-Z0-9][a-zA-Z0-9\-]{0,99}$'
          example: TXpRMU9UQTROMWhZV2xSU1FUazJSMDl
          description: |
            Código ou identificador único informado pela instituição detentora da conta para representar a iniciação de pagamento. O `recurringPaymentId` deve ser diferente do `endToEndId`. 
            Este é o identificador que deverá ser utilizado na consulta ao status da iniciação de pagamento efetuada.
        recurringConsentId:
          type: string
          maxLength: 256
          pattern: '^urn:[a-zA-Z0-9][a-zA-Z0-9\-]{0,31}:[a-zA-Z0-9()+,\-.:=@;$_!*''%\/?#]+$'
          example: 'urn:bancoex:C1DD33123'
          description: |
            Identificador único do consentimento criado para a iniciação de pagamento solicitada. Deverá ser um URN - Uniform Resource Name.
            Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource
            Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN
            seja um identificador de recurso persistente e independente da localização.
            Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
            - o namespace(urn)
            - o identificador associado ao namespace da instituição transnmissora (bancoex)
            - o identificador específico dentro do namespace (C1DD33123).
            Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
        endToEndId:
          $ref: '#/components/schemas/EndToEndId'
        date:
          type: string
          maxLength: 10
          pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])$'
          example: '2023-10-10'
          description: Data em que o recurso foi criado. Uma string com a utilização de timezone UTC(UTC time format).
        creationDateTime:
          type: string
          format: date-time
          maxLength: 20
          pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
          example: '2020-07-21T08:30:00Z'
          description: |
            Data e hora em que o recurso foi criado.
            Uma string com data e hora conforme especificação RFC-3339,
            sempre com a utilização de timezone UTC(UTC time format).
        statusUpdateDateTime:
          type: string
          format: date-time
          maxLength: 20
          pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])T(?:[01]\d|2[0123]):(?:[012345]\d):(?:[012345]\d)Z$'
          example: '2020-07-21T08:30:00Z'
          description: |
            Data e hora da última atualização da iniciação de pagamento.
            Uma string com data e hora conforme especificação RFC-3339,
            sempre com a utilização de timezone UTC(UTC time format).
        ibgeTownCode:
          type: string
          minLength: 7
          maxLength: 7
          pattern: '^\d{7}$'
          example: '5300108'
          description: |
            O campo ibgetowncode no arranjo PIX, tem o mesmo comportamento que o campo codMun descrito no item 1.6.6 do manual do PIX, conforme segue:

            1. Caso a informação referente ao município não seja enviada; o PSP do recebedor assumirá que não existem feriados estaduais e municipais no período em questão;
        status:
          $ref: '#/components/schemas/EnumPaymentStatusType'
        rejectionReason:
          $ref: '#/components/schemas/RejectionReason'
        cnpjInitiator:
          type: string
          pattern: '^\d{14}$'
          maxLength: 14
          example: '50685362000135'
          description: CNPJ do Iniciador de Pagamento devidamente habilitado para a prestação de Serviço de Iniciação no Pix.
        payment:
          $ref: '#/components/schemas/PaymentPix'
        remittanceInformation:
          type: string
          maxLength: 140
          pattern: '[\w\W\s]*'
          example: Pagamento da nota RSTO035-002.
          description: |
            Deve ser preenchido sempre que o usuário pagador inserir alguma informação adicional em um pagamento, a ser enviada ao recebedor.
        creditorAccount:
          $ref: '#/components/schemas/CreditorAccount'
        debtorAccount:
            $ref: '#/components/schemas/DebtorAccount'
        cancellation:
          $ref: '#/components/schemas/PixPaymentCancellation'
        authorisationFlow:
          type: string
          enum:
            - HYBRID_FLOW
            - CIBA_FLOW
            - FIDO_FLOW
          example: HYBRID_FLOW
          description: |
            Campo condicional utilizado para identificar o fluxo de autorização em que o pagamento foi solicitado.
            
            [Restrição] Se CIBA ou FIDO, preenchimento obrigatório. Caso o campo não esteja presente no payload, subentende-se que o fluxo de autorização utilizado é o HYBRID_FLOW.
    XFapiInteractionId:
      type: string
      pattern: '^[a-zA-Z0-9][a-zA-Z0-9\-]{0,99}$'
      maxLength: 100
      description: 'Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.'
  parameters:
    recurringConsentId:
      name: recurringConsentId
      in: path
      description: |
        O recurringConsentId é o identificador único do consentimento de longa duração e deverá ser um URN - Uniform Resource Name.  
        Um URN, conforme definido na [RFC8141](https://tools.ietf.org/html/rfc8141) é um Uniform Resource 
        Identifier - URI - que é atribuído sob o URI scheme "urn" e um namespace URN específico, com a intenção de que o URN 
        seja um identificador de recurso persistente e independente da localização.  
        Considerando a string urn:bancoex:C1DD33123 como exemplo para consentId temos:
        - o namespace(urn)
        - o identificador associado ao namespace da instituição detentora (bancoex).
        - o identificador específico dentro do namespace (C1DD33123).  
        Informações mais detalhadas sobre a construção de namespaces devem ser consultadas na [RFC8141](https://tools.ietf.org/html/rfc8141).
      required: true
      schema:
        type: string
        pattern: '^urn:[a-zA-Z0-9][a-zA-Z0-9\-]{0,31}:[a-zA-Z0-9()+,\-.:=@;$_!*''%\/?#]+$'
        minLength: 1
        maxLength: 100
    recurringPaymentId:
      name: recurringPaymentId
      in: path
      description: Identificador da operação de pagamento.
      required: true
      schema:
        type: string
        pattern: '^[a-zA-Z0-9][a-zA-Z0-9\-]{0,99}$'
        maxLength: 100
    startDate:
      name: startDate
      in: query
      description: Data inicial de corte da ocorrência do pagamento ligada ao consentimento de longa duração.
      required: false
      schema:
        type: string
        pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])$'
        minLength: 10
        maxLength: 10
    endDate:
      name: endDate
      in: query
      description: Data final de corte para recuperação da ocorrência do pagamento ligada ao consentimento de longa duração.
      required: false
      schema:
        type: string
        pattern: '^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])$'
        minLength: 10
        maxLength: 10
    Authorization:
      name: Authorization
      in: header
      description: Cabeçalho HTTP padrão. Permite que as credenciais sejam fornecidas dependendo do tipo de recurso solicitado
      required: true
      schema:
        type: string
        pattern: '[\w\W\s]*'
        minLength: 1
        maxLength: 2048
    xCustomerUserAgent:
      name: x-customer-user-agent
      in: header
      description: Indica o user-agent que o usuário utiliza.
      required: false
      schema:
        type: string
        pattern: '[\w\W\s]*'
        minLength: 1
        maxLength: 100
    xFapiAuthDate:
      name: x-fapi-auth-date
      in: header
      description: 'Data em que o usuário logou pela última vez com o receptor. Representada de acordo com a [RFC7231](https://tools.ietf.org/html/rfc7231).Exemplo: Sun, 10 Sep 2017 19:43:31 UTC'
      required: false
      schema:
        type: string
        pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4} \d{2}:\d{2}:\d{2} (GMT|UTC)$'
        minLength: 29
        maxLength: 29
    xFapiCustomerIpAddress:
      name: x-fapi-customer-ip-address
      in: header
      description: O endereço IP do usuário se estiver atualmente logado com o receptor.
      required: false
      schema:
        type: string
        pattern: '[\w\W\s]*'
        minLength: 1
        maxLength: 100
    xFapiInteractionId:
      name: x-fapi-interaction-id
      in: header
      description: 'Um UUID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.'
      required: true
      schema:
        type: string
        pattern: '^[a-zA-Z0-9][a-zA-Z0-9\-]{0,99}$'
        minLength: 1
        maxLength: 100
    XIdempotencyKey:
      name: x-idempotency-key
      in: header
      description: Cabeçalho HTTP personalizado. Identificador de solicitação exclusivo para suportar a idempotência.
      required: true
      schema:
        type: string
        minLength: 1
        maxLength: 40
        pattern: ^(?!\s)(.*)(\S)$
  securitySchemes:
    OAuth2ClientCredentials:
      type: oauth2
      description: |
        Fluxo OAuth necessário para que a iniciadora possa iniciar pagamentos. Requer o processo de redirecionamento e autenticação do usuário.  
        Apenas pagamentos iniciados pela mesma iniciadora de pagamentos podem ser consultados ou cancelados através de modelo client credentials.
      flows:
        clientCredentials:
          tokenUrl: 'https://authserver.example/token'
          scopes:
            recurringPayments: Escopo necessário para acesso à API Payment Initiation.
    OAuth2AuthorizationCode:
      type: oauth2
      description: Fluxo OAuth necessário para que a iniciadora possa iniciar pagamentos. Requer o processo de redirecionamento e autenticação do usuário.
      flows:
        authorizationCode:
          authorizationUrl: 'https://authserver.example/token'
          tokenUrl: 'https://authserver.example/token'
          scopes:
            recurringPayments: Escopo necessário para acesso à API Payment Initiation.
            openid: Indica que a autorização está sendo realizada utilizando o protocolo definido pela openid.
            'recurringConsent:recurringConsentId': Escopo contendo o identificador único do consentimento criado para a iniciação de pagamento solicitada
  responses:
    BadRequest:
      description: 'A requisição foi malformada, omitindo atributos obrigatórios, seja no payload ou através de atributos na URL.'
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.
          schema:
            $ref: '#/components/schemas/XFapiInteractionId'
    BadRequestPayments:
      description: 'Seguir as orientações presentes na descrição da API, subitem 1.2.3'
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.
          schema:
            $ref: '#/components/schemas/XFapiInteractionId'
    BadRequestPixPayments:
      description: 'Seguir as orientações presentes na descrição da API, subitem 2.1.3.'
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.
          schema:
            $ref: '#/components/schemas/XFapiInteractionId'
    Forbidden:
      description: O token tem escopo incorreto ou uma política de segurança foi violada
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.
          schema:
            $ref: '#/components/schemas/XFapiInteractionId'
    InternalServerError:
      description: Ocorreu um erro no gateway da API ou no microsserviço
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.
          schema:
            $ref: '#/components/schemas/XFapiInteractionId'
    GatewayTimeoutWithAdditionalProperties:
      description: GATEWAY TIMEOUT - A requisição não foi atendida dentro do tempo limite estabelecido
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
    MethodNotAllowed:
      description: O consumidor tentou acessar o recurso com um método não suportado
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.
          schema:
            $ref: '#/components/schemas/XFapiInteractionId'
    NotAcceptable:
      description: A solicitação continha um cabeçalho Accept diferente dos tipos de mídia permitidos ou um conjunto de caracteres diferente de UTF-8
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.
          schema:
            $ref: '#/components/schemas/XFapiInteractionId'
    NotFound:
      description: O recurso solicitado não existe ou não foi implementado
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.
          schema:
            $ref: '#/components/schemas/XFapiInteractionId'
    SiteIsOverloaded:
      description: 'O site está sobrecarregado e a operação foi recusada, pois foi atingido o limite máximo de TPS global, neste momento.'
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
    TooManyRequests:
      description: 'A operação foi recusada, pois muitas solicitações foram feitas dentro de um determinado período ou o limite global de requisições concorrentes foi atingido'
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.
          schema:
            $ref: '#/components/schemas/XFapiInteractionId'
        Retry-After:
          description: |
            Cabeçalho que indica o tempo (em segundos) que o cliente deverá aguardar para realizar uma nova tentativa de chamada. Este cabeçalho deverá estar presente quando o código HTTP de retorno for 429 Too many requests.
          schema:
            description: |
              Cabeçalho que indica o tempo (em segundos) que o cliente deverá aguardar para realizar uma nova tentativa de chamada. Este cabeçalho deverá estar presente quando o código HTTP de retorno for 429 Too many requests.
            type: integer
    UnprocessableEntityPixPayment:
      description: 'Seguir as orientações presentes na descrição da API, itens 2.2 e 2.3 e seus subitens.'
      content:
        application/jwt:
          schema:
            $ref: '#/components/schemas/422ResponseErrorCreatePixPayments'
          examples:
            Saldo insuficiente:
              summary: Saldo insuficiente
              value:
                errors:
                  - code: SALDO_INSUFICIENTE
                    title: Saldo insuficiente.
                    detail: A conta selecionada não possui saldo suficiente para realizar o pagamento.
                meta:
                  requestDateTime: '2021-05-21T08:30:00Z'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.
          schema:
            $ref: '#/components/schemas/XFapiInteractionId'
    UnprocessableEntityConsents:
      description: 'Seguir as orientações presentes na descrição da API, item 1.3 e seus subitens.'
      content:
        application/jwt:
          schema:
            $ref: '#/components/schemas/422ResponseErrorCreateConsent'
          examples:
            Forma de pagamento inválida:
              summary: Forma de pagamento inválida
              value:
                errors:
                  - code: FORMA_PAGAMENTO_INVALIDA
                    title: Forma de pagamento inválida.
                    detail: 'Forma de pagamento [Modalidade] não suportada.'
                meta:
                  requestDateTime: '2021-05-21T08:30:00Z'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.
          schema:
            $ref: '#/components/schemas/XFapiInteractionId'
    LockedWithAdditionalProperties:
      description: Locked
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
    UnprocessableEntityPixPayments:
      description: 'A requisição foi malformada, omitindo atributos obrigatórios, seja no payload ou através de atributos na URL.'
      content:
        application/jwt:
          schema:
            $ref: '#/components/schemas/422ResponseErrorCreatePixPayment'
          examples:
            Saldo insuficiente:
              summary: Saldo insuficiente
              value:
                errors:
                  - code: PAGAMENTO_NAO_PERMITE_CANCELAMENTO
                    title: Pagamento não permite cancelamento
                    detail: Pagamento não permite cancelamento
                meta:
                  requestDateTime: '2021-05-21T08:30:00Z'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.
          schema:
            $ref: '#/components/schemas/XFapiInteractionId'
    Unauthorized:
      description: Cabeçalho de autenticação ausente/inválido ou token inválido
      content:
        application/json; charset=utf-8:
          schema:
            $ref: '#/components/schemas/ResponseError'
      headers:
        x-fapi-interaction-id:
          description: |
            Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.
          schema:
            $ref: '#/components/schemas/XFapiInteractionId'
    RecurringConsentsConsentIdRead:
      description: Objeto contendo as informações de consentimento para a iniciação de pagamento individual.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.
          schema:
            $ref: '#/components/schemas/XFapiInteractionId'
      content:
        application/jwt:
          schema:
            $ref: '#/components/schemas/ResponseRecurringConsent'
    201RecurringInitiationPixPaymentCreated:
      description: Iniciação de pagamento Pix criada com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.
          schema:
            $ref: '#/components/schemas/XFapiInteractionId'
      content:
        application/jwt:
          schema:
            $ref: '#/components/schemas/ResponseCreatePixPayment'
    200RecurringPixPaymentRead:
      description: Dados de iniciação de pagamento Pix obtidos com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.
          schema:
            $ref: '#/components/schemas/XFapiInteractionId'
      content:
        application/jwt:
          schema:
            $ref: '#/components/schemas/ResponseRecurringPixPayment'
    200RecurringPaymentsIdRead:
      description: Dados de iniciação de pagamento Pix obtidos com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlação. A detentora deve obrigatoriamente retornar o campo com o mesmo valor recebido da iniciadora.
          schema:
            $ref: '#/components/schemas/XFapiInteractionId'
      content:
        application/jwt:
          schema:
            $ref: '#/components/schemas/ResponseRecurringPaymentsIdRead'