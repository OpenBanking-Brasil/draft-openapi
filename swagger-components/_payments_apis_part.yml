openapi: "3.0.0"
info:
  title: API Payment Initiation - Open Finance Brasil
  description: |
    API de Iniciação de Pagamentos, responsável por viabilizar as operações de iniciação de pagamentos para o Open Finance Brasil.
    Para cada uma das formas de pagamento previstas é necessário obter prévio consentimento do cliente através dos `endpoints` dedicados ao consentimento nesta API.

    # Orientações
    No diretório de participantes duas `Roles` estão relacionadas à presente API:
    - `CONTA`, referente às instituições detentoras de conta participantes do Open Finance Brasil;
    - `PAGTO`, referente às instituições iniciadoras de pagamento participantes do Open Finance Brasil. 
    Os tokens utilizados para consumo nos endpoints de consentimentos devem possuir o scope `payments` e os `endpoints` de pagamentos devem possuir os `scopes`, `openid` e `payments`. 
    Esta API não requer a implementação de `permissions` para sua utilização. Todas as requisições e respostas devem ser assinadas seguindo o protocolo estabelecido na sessão <a href="https://openbanking-brasil.github.io/areadesenvolvedor/#assinaturas" target="_blank">Assinaturas</a> do guia de segurança.

    ## Regras do arranjo Pix
    A implementação e o uso da API de Pagamentos Pix devem seguir as regras do arranjo Pix do Banco Central, que podem ser encontradas no link abaixo:   
    [https://www.bcb.gov.br/estabilidadefinanceira/pix?modalAberto=regulamentacao_pix](https://www.bcb.gov.br/estabilidadefinanceira/pix?modalAberto=regulamentacao_pix)

    ## Assinatura de payloads

    No contexto da API Payment Initiation, os `payloads` de mensagem que trafegam tanto por parte da instituição iniciadora de transação de pagamento quanto por parte da instituição detentora
    de conta devem estar assinados. Para o processo de assinatura destes `payloads` as instituições devem seguir as especificações de segurança publicadas no Portal do desenvolvedor:

    - Certificados exigidos para assinatura de mensagens:
    [Padrões de certificados digitais Open Finance Brasil](https://github.com/OpenBanking-Brasil/specs-seguranca/blob/main/open-banking-brasil-certificate-standards-1_ID1.md#certificado-de-assinatura-certificadoassinatura)

    - Como assinar o payload JWS: [https://openfinancebrasil.atlassian.net/wiki/spaces/OF/pages/18055279/Como+Assinar+o+Payload+-+v2.0.0-rc1.0+-+Pagamentos](https://openfinancebrasil.atlassian.net/wiki/spaces/OF/pages/18055279/Como+Assinar+o+Payload+-+v2.0.0-rc1.0+-+Pagamentos)

    ## Controle de acesso

    O endpoint de consulta de pagamento GET /pix/payments/{​​​paymentId}​​​ deve suportar acesso a partir de access_token emitido por meio de um grant_type do tipo `client credentials`, como opção do uso do token vinculado ao consentimento (hybrid flow).

    Para evitar vazamento de informação, a detentora deve validar que o pagamento consultado pertence ao ClientId que o criou e, caso haja divergências, retorne um erro HTTP 400.

    Para o caso de QR Code estático e dinâmico a detentora deverá obrigatoriamente realizar validações sobre o conteúdo dos campos recebidos. Entretanto, a escolha do momento desta validação na criação do consentimento ou no pagamento, fica a cargo da detentora.

    ## Aprovações de múltipla alçada

    Para o caso de Pix imediato, todas as aprovações necessárias devem ser realizadas nos canais da detentora até às 23:59 (horário de Brasília) da data de solicitação do pagamento.
    Já para o caso de Pix agendado, todas as aprovações devem ser realizadas até a data/hora limite suportada pela detentora.

    ## Validações
    **Validações** (*após o processo de DCR e obtenção de token client credential*– não escopo dessa documentação)  
    Durante a jornada de iniciação de pagamento, diferentes validações são necessárias pela instituição detentora 
    de conta e devem ocorrer conforme a seguir: 
    
    1. Na criação do consentimento (*POST /consents*); 
    2. Na criação do pagamento - Síncrono (*POST /payments*); 
    3. Validações na consulta do pagamento (*GET /pix/payments/{paymentId}*);
    4. Demais validações executadas durante o processamento assíncrono pela detentora (consultadas pela iniciadora através do endpoint *GET  /pix/payments/{paymentId}*).

    **Os tipos de validações dispostas abaixo não determinam a ordem em que as instituições devem implementá-las**

    1. **Validações na criação do consentimento (_POST /consents_)**  
      1.1 **Orientações Iniciais**  
        &ensp;1.1.1 Não devem ser retornadas informações associadas ao usuário/cliente (ex. insuficiência de saldo, conta inexistente/bloqueada), uma vez que o cliente ainda não autorizou o consentimento / consumo de seus dados para o pagamento.  
        &ensp;1.1.2 Não devem ser executadas validações no DICT (Diretório de Identificadores de Contas Transacionais do Pix), a partir dos dados compartilhados nesse *endpoint*. Tais  validações podem ocorrer somente na criação do pagamento;  
      1.2 **Casos de erro relacionados às permissões de segurança para acesso à API (ex. certificado, access_token, jwt, assinatura)**  
        &ensp;1.2.1 Validação de Certificado: Valida utilização de certificado correto durante processo de DCR - HTTP Code 401 (INVALID_CLIENT);  
        &ensp;1.2.2 Validação de Access_Token: Verifica se Access_Token utilizado está correto - HTTP Code 401 (UNAUTHORIZED);  
        &ensp;1.2.3 Validação de assinatura da mensagem: Valida se assinatura das mensagens enviadas está correta – HTTP Code 400 (BAD_SIGNATURE);  
        &ensp;1.2.4 Validação de Claims (exceto data);  
          &emsp;1.2.4.1 Valida se dados (aud, iss, iat e jti) são válidos - HTTP status code 400 – (BAD REQUEST);  
          &emsp;1.2.4.2 Valida reuso de jti - HTTP Code 403 (INVALID_CLIENT).  
      1.3 **Casos de erros sintáticos e semânticos, previstos com retorno HTTP Code 422 - Unprocessable Entity (detalhamento adicional na documentação técnica da API):**   
        &ensp;1.3.1 **Sintáticos**  
          &emsp;1.3.1.1 Envio de campos obrigatórios: Valida se todos os campos obrigatórios são informados (PARAMETRO_NAO_INFORMADO);  
          &emsp;1.3.1.2 Formatação de parâmetros: Valida se parâmetros informados obedecem a formatação especificada (PARAMETRO_INVALIDO).  
        &ensp;1.3.2 **Semânticos**  
          &emsp;1.3.2.1 Forma de pagamento: Valida se a forma de pagamento é suportada pela detentora (FORMA_PAGAMENTO_INVALIDA) **Obs. No detalhe do erro, a variável “modalidade” deve ser comunicada pela detentora da forma mais clara possível - ex. modalidade de pagamento não suportada (_localInstrument_ - QRES) ou tipo de arranjo pagamento não suportado (_type_ – ex. Pix / TED – previsto para inclusão futura);**  
          &emsp;1.3.2.2 Data de pagamento: Valida se a data de pagamento enviada é válida para a forma de pagamento selecionada (DATA_PAGAMENTO_INVALIDA);  
          &emsp;1.3.2.3 Detalhes do pagamento: Valida se determinado parâmetro informado obedece às regras de negócio (DETALHE_PAGAMENTO_INVALIDO);  
          &emsp;1.3.2.4 Demais validações não explicitamente informadas (ex. suspeita de fraude): (NAO_INFORMADO);  
          &emsp;1.3.2.5 Idempotência: Valida se há divergência entre chave de idempotência e informações enviadas (ERRO_IDEMPOTENCIA).  

    2. **Validações na criação do pagamento - Síncrono (_POST /payments_)**  
      2.1 **Casos de erro relacionados às permissões de segurança para acesso à API (ex. certificado, access_token, jwt, assinatura)**  
        &ensp;2.1.1 Validação de Certificado: Valida utilização de certificado correto durante processo de DCR - HTTP Code 401 (INVALID_CLIENT);  
        &ensp;2.1.2 Validação de Access_Token: Verifica se Access_Token utilizado está correto - HTTP Code 401 (UNAUTHORIZED);  
        &ensp;2.1.3 Validação de assinatura da mensagem: Valida se assinatura das mensagens enviadas está correta – HTTP Code 400 (BAD_SIGNATURE);  
        &ensp;2.1.4 Validação de Claims (exceto data);  
          &emsp;2.1.4.1 Valida se dados (aud, iss, iat e jti) são válidos - HTTP status code 400 – (BAD REQUEST);  
          &emsp;2.1.4.2 Valida reuso de jti - HTTP Code 403 (INVALID_CLIENT).  
      2.2 **Casos de erro sintáticos e semânticos, previstos com retorno HTTP Code 422 - Unprocessable Entity (detalhamento adicional na documentação técnica da API):**  
        &ensp;2.2.1 **Sintáticos**  
          &emsp;2.3.1.1 Envio de campos obrigatórios: Valida se todos os campos obrigatórios são informados (PARAMETRO_NAO_INFORMADO);  
          &emsp;2.3.1.2 Formatação de parâmetros: Valida se parâmetros informados obedecem a formatação especificada (PARAMETRO_INVALIDO).  
        &ensp;2.2.2 **Semânticos**  
          &emsp;2.2.2.1 Saldo do usuário: Valida se a conta selecionada possui saldo suficiente para realizar o pagamento (SALDO_INSUFICIENTE);  
          &emsp;2.2.2.2 Limites da transação: Valida se valor (ou quantidade de transações) ultrapassa faixa de limite parametrizada na detentora (VALOR_ACIMA_LIMITE);  
          &emsp;2.2.2.3 Valor informado (QR Code): Valida se valor enviado é válido para o QR Code informado (VALOR_INVALIDO);  
          &emsp;2.2.2.4 Cobrança inválida: Valida expiração, vencimento e status (COBRANCA_INVALIDA);  
          &emsp;2.2.2.5 Status Consentimento: Valida se status de consentimento é diferente de “AUTHORISED” (CONSENTIMENTO_INVALIDO);  
          &emsp;2.2.2.6 Divergência entre pagamento e consentimento: Valida se dados do pagamento são diferentes dos dados do consentimento (PAGAMENTO_DIVERGENTE_CONSENTIMENTO)  
          &emsp;2.2.2.7 Recusado pela detentora: Valida se pagamento foi recusado pela detentora (PAGAMENTO_RECUSADO_DETENTORA), com a descrição do motivo de recusa (ex. chave Pix inválida, QRCode inválido, conta bloqueada);  
          &emsp;2.2.2.8 Detalhes do pagamento: Valida se determinado parâmetro informado obedece às regras de negócio (DETALHE_PAGAMENTO_INVALIDO);  
          &emsp;2.2.2.9 Demais validações não explicitamente informadas (ex. suspeita de fraude): (NAO_INFORMADO);  
          &emsp;2.2.2.10 Idempotência: Valida se há divergência entre chave de idempotência e informações enviadas (ERRO_IDEMPOTENCIA).  
      2.3 **Casos de erro para validações síncronas no DICT**  
        &ensp;Nesse cenário, o pagamento não é criado, porém o consentimento deve ser alterado para o status CONSUMED Retorno esperado do endpoint POST/Payments: HTTP Code 422 - Unprocessable Entity:  
        &ensp;• Erro por dados inválidos: Conforme item **2.2.2.8**  
        &ensp;• Erro por suspeita de fraude: Conforme item **2.2.2.9**  

    3. **Validações na consulta do pagamento (_GET /pix/payments/{paymentId}_)**  
      3.1 **Casos de erro relacionados às permissões de segurança para acesso à API (ex. certificado, access_token)**  
        &ensp;3.1.1 Validação de Certificado: Valida utilização de certificado correto durante processo de DCR - HTTP Code 401 (INVALID_CLIENT);  
        &ensp;3.1.2 Validação de Access_Token: Verifica se Access_Token utilizado está correto - HTTP Code 401 (UNAUTHORIZED).  
    
    4. **Demais validações executadas durante o processamento assíncrono pela detentora, poderão ser consultados pela iniciadora através do endpoint _GET /pix/payments/{paymentId}_ previstos com retorno HTTP Code 200 – OK com status RJCT (Rejected) e rejectionReason conforme abaixo (detalhamento adicional na documentação técnica da API):**  
      4.1 **Demais validações durante processamento assíncrono**  
        &ensp;4.1.1 Saldo do usuário: Valida se a conta selecionada possui saldo suficiente para realizar o pagamento (SALDO_INSUFICIENTE);  
        &ensp;4.1.2 Limites da transação: Valida se valor (ou quantidade de transações) ultrapassa faixa de limite parametrizada na detentora (VALOR_ACIMA_LIMITE);  
        &ensp;4.1.3 Valor informado (QR Code): Valida se valor enviado é válido para o QR Code informado (VALOR_INVALIDO);  
        &ensp;4.1.4 Cobrança inválida: Valida expiração, vencimento e status (COBRANCA_INVALIDA);  
        &ensp;4.1.5 Divergência entre pagamento e consentimento: Valida se dados do pagamento são diferentes dos dados do consentimento (PAGAMENTO_DIVERGENTE_CONSENTIMENTO);  
        &ensp;4.1.6 Recusado pela detentora: Valida se pagamento foi recusado pela detentora (PAGAMENTO_RECUSADO_DETENTORA), com a descrição do motivo de recusa (ex. chave Pix inválida, QRCode inválido, conta bloqueada);  
        &ensp;4.1.7 Detalhes do pagamento: Valida se determinado parâmetro informado obedece às regras de negócio (DETALHE_PAGAMENTO_INVALIDO);  
        &ensp;4.1.8 Demais validações não explicitamente informadas (ex. suspeita de fraude): (NAO_INFORMADO);  
        &ensp;4.1.9 Validação SPI: Externaliza validações no SPI (PAGAMENTO_RECUSADO_SPI);  
      4.2 **Casos de erro para validações assíncronas no DICT**  
        &ensp;Neste cenário o pagamento é criado com sucesso (status RCVD) e o consentimento é consumido (status CONSUMED), porém, as validações contra o DICT só ocorrerão de forma assíncrona e em caso de negativa será percebido pela iniciadora na consulta do pagamento (GET /Payments).  
        &ensp;Retorno esperado do endpoint GET /Payments: HTTP Code 200 - OK.  
        &ensp;Status do Pagamento: RJCT (Rejected), com as seguintes opções rejectionReason:  
        &ensp;• Erro por dados inválidos: Conforme item **4.1.7**;  
        &ensp;• Erro por suspeita de fraude: Conforme item **4.1.8**.

  version: 2.0.0
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0"
  contact:
    name: Governança do Open Finance Brasil – Especificações
    email: gt-interfaces@openbankingbr.org
    url: "https://openbanking-brasil.github.io/areadesenvolvedor/"
servers:
  - url: "https://api.banco.com.br/open-banking/payments/v2"
    description: Servidor de Produção
  - url: "https://apih.banco.com.br/open-banking/payments/v2"
    description: Servidor de Homologação
tags:
  - name: Pagamentos
paths:
  /consents:
    post:
      tags:
        - Pagamentos
      summary: Criar consentimento para a iniciação de pagamento.
      operationId: paymentsPostConsents
      description: Método de criação do consentimento para a iniciação de pagamento.
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xFapiAuthDate"
        - $ref: "#/components/parameters/xFapiCustomerIpAddress"
        - $ref: "#/components/parameters/xFapiInteractionId"
        - $ref: "#/components/parameters/xCustomerUserAgent"
        - $ref: "#/components/parameters/XIdempotencyKey"
      requestBody:
        content:
          application/jwt:
            schema:
              $ref: "#/components/schemas/CreatePaymentConsent"
        description: Payload para criação do consentimento para iniciação do pagamento.
        required: true
      responses:
        "201":
          $ref: "#/components/responses/201PaymentsConsentsConsentCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/MethodNotAllowed"
        "406":
          $ref: "#/components/responses/NotAcceptable"
        "415":
          $ref: "#/components/responses/UnsupportedMediaType"
        "422":
          $ref: "#/components/responses/UnprocessableEntityConsents"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"
        '529':
          $ref: '#/components/responses/SiteIsOverloaded'
        default:
          description: Erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      security:
        - OAuth2ClientCredentials:
            - payments
  /consents/{consentId}:
    get:
      tags:
        - Pagamentos
      summary: Consultar consentimento para iniciação de pagamento.
      operationId: paymentsGetConsentsConsentId
      description: Método para consulta do consentimento para a iniciação de pagamento.
      parameters:
        - $ref: "#/components/parameters/consentId"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xFapiAuthDate"
        - $ref: "#/components/parameters/xFapiCustomerIpAddress"
        - $ref: "#/components/parameters/xFapiInteractionId"
        - $ref: "#/components/parameters/xCustomerUserAgent"
      responses:
        "200":
          $ref: "#/components/responses/200PaymentsConsentsConsentIdRead"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/MethodNotAllowed"
        "406":
          $ref: "#/components/responses/NotAcceptable"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"
        '529':
          $ref: '#/components/responses/SiteIsOverloaded'
        default:
          description: Erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      security:
        - OAuth2ClientCredentials:
            - payments
  /pix/payments:
    post:
      tags:
        - Pagamentos
      summary: Criar iniciação de pagamento.
      operationId: paymentsPostPixPayments
      description: Método para criar uma iniciação de pagamento.
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xFapiAuthDate"
        - $ref: "#/components/parameters/xFapiCustomerIpAddress"
        - $ref: "#/components/parameters/xFapiInteractionId"
        - $ref: "#/components/parameters/xCustomerUserAgent"
        - $ref: "#/components/parameters/XIdempotencyKey"
      requestBody:
        content:
          application/jwt:
            schema:
              $ref: "#/components/schemas/CreatePixPayment"
        description: Payload para criação da iniciação do pagamento Pix.
        required: true
      responses:
        "201":
          $ref: "#/components/responses/201PaymentsInitiationPixPaymentCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/MethodNotAllowed"
        "406":
          $ref: "#/components/responses/NotAcceptable"
        "415":
          $ref: "#/components/responses/UnsupportedMediaType"
        "422":
          $ref: "#/components/responses/UnprocessableEntityPixPayments"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"
        '529':
          $ref: '#/components/responses/SiteIsOverloaded'
        default:
          description: Erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      security:
        - OAuth2AuthorizationCode:
            - openid
            - "consent:consentId"
            - payments
  /pix/payments/{paymentId}:
    get:
      tags:
        - Pagamentos
      summary: Consultar iniciação de pagamento.
      operationId: paymentsGetPixPaymentsPaymentId
      description: Método para consultar uma iniciação de pagamento.
      parameters:
        - $ref: "#/components/parameters/paymentId"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xFapiAuthDate"
        - $ref: "#/components/parameters/xFapiCustomerIpAddress"
        - $ref: "#/components/parameters/xFapiInteractionId"
        - $ref: "#/components/parameters/xCustomerUserAgent"
      responses:
        "200":
          $ref: "#/components/responses/200PaymentsInitiationPixPaymentIdRead"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/MethodNotAllowed"
        "406":
          $ref: "#/components/responses/NotAcceptable"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"
        '529':
          $ref: '#/components/responses/SiteIsOverloaded'
        default:
          description: Erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      security:
        - OAuth2AuthorizationCode:
            - openid
            - payments
        - OAuth2ClientCredentials:
            - payments
    patch:
      tags:
        - Pagamentos
      summary: Cancelar iniciação de pagamento.
      operationId: paymentsPatchPixPaymentsPaymentId
      description: |
        
        Esse endpoint deve ser usado para cancelar, a pedido do cliente pagador, as transações que estejam em uma das seguintes situações: Agendada com sucesso (SCHD), retida para análise (PDNG) ou aguardando autorização de múltiplas alçadas (PATC).  

        - Caso a requisição seja bem sucedida, a transação vai para a situação CANC.

        - Caso o status do pagamento seja diferente de SCHD/PDNG/PATC ou alguma outra regra de negócio impeça o cancelamento, a requisição PATCH retorna HTTP Status 422 com o code PAGAMENTO_NAO_PERMITE_CANCELAMENTO.

        - Caso receba um 422, a iniciadora deve fazer uma requisição GET no pagamento para verificar a situação atual dele, bem como detalhes associados.  

        O cancelamento de pagamento deve ser enviado até 23:59 (Horário de Brasília) do dia anterior à data de efetivação do pagamento.  
      parameters:
        - $ref: "#/components/parameters/paymentId"
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/xFapiAuthDate"
        - $ref: "#/components/parameters/xFapiCustomerIpAddress"
        - $ref: "#/components/parameters/xFapiInteractionId"
        - $ref: "#/components/parameters/xCustomerUserAgent"
      requestBody:
        content:
          application/jwt:
            schema:
              $ref: '#/components/schemas/PatchPixPayment'
        description: Payload para cancelamento do pagamento.
        required: true
      responses:
        "200":
          $ref: "#/components/responses/200PatchPixPayments"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "405":
          $ref: "#/components/responses/MethodNotAllowed"
        "406":
          $ref: "#/components/responses/NotAcceptable"
        "422":
          $ref: "#/components/responses/UnprocessableEntityPixPayments"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/InternalServerError"
        '529':
          $ref: '#/components/responses/SiteIsOverloaded'
        default:
          description: Erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
      security:
        - OAuth2ClientCredentials:
            - payments
components:
  schemas:
    422ResponseErrorCreateConsent:
      $ref: ./schemas/payments_apis/422ResponseErrorCreateConsent.yaml
    422ResponseErrorCreatePixPayment:
      $ref: ./schemas/payments_apis/422ResponseErrorCreatePixPayment.yaml
    BusinessEntity:
      $ref: ./schemas/payments_apis/BusinessEntity.yaml
    CreatePaymentConsent:
      $ref: ./schemas/payments_apis/CreatePaymentConsent.yaml
    CreatePixPayment:
      $ref: ./schemas/payments_apis/CreatePixPayment.yaml
    CreatePixPaymentData:
      $ref: ./schemas/payments_apis/CreatePixPaymentData.yaml
    CreditorAccount:
      $ref: ./schemas/business_commons/CreditorAccount.yaml
    DebtorAccount:
      $ref: ./schemas/business_commons/DebtorAccount.yaml
    Details:
      $ref: ./schemas/payments_apis/PaymentDetails.yaml
    EndToEndId:
      $ref: ./schemas/business_commons/EndToEndId.yaml
    EndToEndIdWithoutRestriction:
      $ref: ./schemas/business_commons/EndToEndIdWithoutRestriction.yaml
    EnumAccountPaymentsType:
      $ref: ./schemas/enum/EnumAccountPaymentsType.yaml
    EnumAuthorisationStatusType:
      $ref: ./schemas/enum/EnumAuthorisationStatusType.yaml
    EnumErrorsCreatePayment:
      $ref: ./schemas/enum/EnumErrorsCreatePayment.yaml
    EnumLocalInstrument:
      $ref: ./schemas/payments_apis/EnumLocalInstrument.yaml
    EnumPaymentCancellationStatusType:
      $ref: ./schemas/payments_apis/EnumPaymentCancellationStatusType.yaml
    EnumPaymentPersonType:
      $ref: ./schemas/enum/EnumPaymentPersonType.yaml
    EnumPaymentStatusType:
      $ref: ./schemas/enum/EnumPaymentStatusType.yaml
    EnumPaymentType:
      $ref: ./schemas/enum/EnumPaymentType.yaml
    EnumRejectionReasonType:
      $ref: ./schemas/payments_apis/EnumRejectionReasonType.yaml
    EnumPaymentCancellationReasonType:
      $ref: ./schemas/payments_apis/EnumPaymentCancellationReasonType.yaml
    EnumPaymentCancellationFromType:
      $ref: ./schemas/payments_apis/EnumPaymentCancellationFromType.yaml
    RejectionReason:
      $ref: ./schemas/payments_apis/RejectionReason.yaml
    Identification:
      $ref: ./schemas/payments_apis/PaymentIdentification.yaml
    LoggedUser:
      $ref: ./schemas/payments_apis/LoggedUser.yaml
    Meta:
      $ref: ./schemas/MetaSingle.yaml
    LinkSingle:
      $ref: ./schemas/LinkSingle.yaml
    PaymentConsent:
      $ref: ./schemas/payments_apis/PaymentConsent.yaml
    PaymentPix:
      $ref: ./schemas/payments_apis/PaymentPix.yaml
    PatchPixPayment:
      $ref: ./schemas/payments_apis/PatchPixPayment.yaml
    PatchPixPaymentData:
      $ref: ./schemas/payments_apis/PatchPixPaymentData.yaml
    PatchPixPaymentCancellation:
      $ref: ./schemas/payments_apis/PatchPixPaymentCancellation.yaml
    PixPaymentCancellation:
      $ref: ./schemas/payments_apis/PixPaymentCancellation.yaml
    ResponseError:
      $ref: ./schemas/ResponseErrorMetaSingle.yaml
    ResponsePaymentConsent:
      $ref: ./schemas/payments_apis/ResponsePaymentConsent.yaml
    ResponseCreatePaymentConsent:
      $ref: ./schemas/payments_apis/ResponseCreatePaymentConsent.yaml
    ResponsePixPayment:
      $ref: ./schemas/payments_apis/ResponsePixPayment.yaml
    ResponsePatchPixPayment:
      $ref: ./schemas/payments_apis/ResponsePatchPixPayment.yaml 
    ResponsePatchPixPaymentData:
      $ref: ./schemas/payments_apis/ResponsePatchPixPaymentData.yaml
    ResponseCreatePixPayment:
      $ref: ./schemas/payments_apis/ResponseCreatePixPayment.yaml
    ResponsePixPaymentData:
      $ref: ./schemas/payments_apis/ResponsePixPaymentData.yaml
    Schedule: 
      $ref: ./schemas/payments_apis/Schedule.yaml
    XFapiInteractionId:
      $ref: ./headers/XFapiInteractionId.yaml
  parameters:
    consentId:
      $ref: ./parameters/PaymentsConsentId.yaml
    paymentId:
      $ref: ./parameters/PaymentId.yaml
    Authorization:
      $ref: ./parameters/Authorization.yaml
    xCustomerUserAgent:
      $ref: ./parameters/XCustomerUserAgent.yaml
    xFapiAuthDate:
      $ref: ./parameters/XFapiAuthDate.yaml
    xFapiCustomerIpAddress:
      $ref: ./parameters/XFapiCustomerIpAddress.yaml
    xFapiInteractionId:
      $ref: ./parameters/XFapiInteractionId.yaml
    XIdempotencyKey:
      $ref: ./parameters/XIdempotencyKey.yaml
  securitySchemes:
    OpenId:
      type: openIdConnect
      openIdConnectUrl: "https://auth.mockbank.poc.raidiam.io/.well-known/openid-configuration"
    OAuth2ClientCredentials:
      type: oauth2
      description: |
        Fluxo OAuth necessário para que a iniciadora possa iniciar pagamentos. Requer o processo de redirecionamento e autenticação do usuário.  
        Apenas pagamentos iniciados pela mesma iniciadora de pagamentos podem ser consultados ou cancelados através de modelo client credentials.
      flows:
        clientCredentials:
          tokenUrl: "https://authserver.example/token"
          scopes:
            payments: Escopo necessário para acesso à API Payment Initiation.
    OAuth2AuthorizationCode:
      type: oauth2
      description: Fluxo OAuth necessário para que a iniciadora possa iniciar pagamentos. Requer o processo de redirecionamento e autenticação do usuário.
      flows:
        authorizationCode:
          authorizationUrl: "https://authserver.example/token"
          tokenUrl: "https://authserver.example/token"
          scopes:
            payments: Escopo necessário para acesso à API Payment Initiation.
  responses:
    BadRequest:
      $ref: ./responses/payments_apis/BadRequest.yaml
    Forbidden:
      $ref: ./responses/payments_apis/Forbidden.yaml
    InternalServerError:
      $ref: ./responses/payments_apis/InternalServerError.yaml
    MethodNotAllowed:
      $ref: ./responses/payments_apis/MethodNotAllowed.yaml
    NotAcceptable:
      $ref: ./responses/payments_apis/NotAcceptable.yaml
    NotFound:
      $ref: ./responses/payments_apis/NotFound.yaml
    SiteIsOverloaded:
      $ref: ./responses/payments_apis/SiteIsOverloaded.yaml
    TooManyRequests:
      $ref: ./responses/payments_apis/TooManyRequests.yaml
    UnprocessableEntityConsents:
      $ref: ./schemas/payments_apis/UnprocessableEntityConsents.yaml
    UnprocessableEntityPixPayments:
      $ref: ./schemas/payments_apis/UnprocessableEntityPixPayments.yaml
    Unauthorized:
      $ref: ./responses/payments_apis/Unauthorized.yaml
    UnsupportedMediaType:
      $ref: ./responses/payments_apis/UnsupportedMediaType.yaml
    201PaymentsConsentsConsentCreated:
      description: Consentimento de pagamento criado com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: "#/components/schemas/XFapiInteractionId"
      content:
        application/jwt:
          schema:
            $ref: "#/components/schemas/ResponseCreatePaymentConsent"
    200PaymentsConsentsConsentIdRead:
      description: Dados do consentimento de pagamento obtidos com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: "#/components/schemas/XFapiInteractionId"
      content:
        application/jwt:
          schema:
            $ref: "#/components/schemas/ResponsePaymentConsent"
    201PaymentsInitiationPixPaymentCreated:
      description: Iniciação de pagamento Pix criada com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: "#/components/schemas/XFapiInteractionId"
      content:
        application/jwt:
          schema:
            $ref: "#/components/schemas/ResponseCreatePixPayment"
    200PaymentsInitiationPixPaymentIdRead:
      description: Dados de iniciação de pagamento Pix obtidos com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: "#/components/schemas/XFapiInteractionId"
      content:
        application/jwt:
          schema:
            $ref: "#/components/schemas/ResponsePixPayment"
    200PatchPixPayments:
      description: Iniciação de pagamento Pix cancelada com sucesso.
      headers:
        x-fapi-interaction-id:
          description: |
            Um UUID RFC4122 usado como um ID de correlação. O transmissor deve usar o mesmo valor recebido na requisição para o cabeçalho de resposta recebido na requisição, caso não tenha sido fornecido, deve se usar um UUID RFC4122.
          schema:
            $ref: "#/components/schemas/XFapiInteractionId"
      content:
        application/jwt:
          schema:
            $ref: "#/components/schemas/ResponsePatchPixPayment"
            